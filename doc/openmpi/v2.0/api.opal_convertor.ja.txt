################################################################
``opal_convertor_t`` (OPALのconvertor)
################################################################

.. style: docutils-report

2014年11月ごろの `Open MPI <https://www.open-mpi.org/>`_ の
``opal_convertor_t`` 関連のソースを読んだときのメモ。

.. contents::

概要
================================================================

あるdatatypeによるメモリ配置のデータを別のメモリ配置に変換する、
もしくはその逆を行う場合は、 ``opal_convertor_t`` オブジェクトを作成・
使用して、処理を行う。

このデータ変換は、例えば、あるdatatypeのデータを連続なメモリ領域へ
pack、連続なメモリ領域にあるデータをあるdatatypeのメモリ領域へunpack、
などが該当する。

``opal_datatype_t`` オブジェクトはdatatypeと一対一に対応するが、
``opal_convertor_t`` オブジェクトは1回のデータ変換と一対一に対応する。
つまり、1回のデータ変換に対して1個の ``opal_convertor_t`` オブジェクトが
必要になり、データ変換をどこまで行ったかの状態のデータを保持する。

ob1 PMLにおけるstandard modeでのeager送信時の関数呼び出しの流れ::

  opal_convertor_copy_and_prepare_for_send
    opal_convertor_prepare_for_send
      OPAL_CONVERTOR_PREPARE
        if (count == 0 || opal_datatype_t::size == 0)
          opal_convertor_t::flags |= CONVERTOR_COMPLETED
        else if (((opal_convertor_t::flags & OPAL_DATATYPE_FLAG_NO_GAPS)) ||
                 ((opal_convertor_t::flags & OPAL_DATATYPE_CONTIGUOUS) &&
                  count == 1))
          opal_convertor_t::flags |= CONVERTOR_NO_OP
        else
          opal_convertor_create_stack_at_begining
  opal_convertor_pack
    OPAL_CONVERTOR_SET_STATUS_BEFORE_PACK_UNPACK
    if (opal_convertor_t::flags & CONVERTOR_NO_OP)
      for (iov_count)
        memcpy
      convertor->flags |= CONVERTOR_COMPLETED
    else
      opal_convertor_t::fAdvance
        opal_convertor_t::flags |= CONVERTOR_COMPLETED

ob1 PMLにおけるstandard modeでのeager受信時の関数呼び出しの流れ::

  opal_convertor_copy_and_prepare_for_recv
    opal_convertor_prepare_for_recv
      OPAL_CONVERTOR_PREPARE
        if (count == 0 || opal_datatype_t::size == 0)
          opal_convertor_t::flags |= CONVERTOR_COMPLETED
        else if (((opal_convertor_t::flags & OPAL_DATATYPE_FLAG_NO_GAPS)) ||
                 ((opal_convertor_t::flags & OPAL_DATATYPE_CONTIGUOUS) &&
                  (count == 1)))
          opal_convertor_t::flags |= CONVERTOR_NO_OP
        else
          opal_convertor_create_stack_at_begining
  opal_convertor_unpack
    OPAL_CONVERTOR_SET_STATUS_BEFORE_PACK_UNPACK
    if (opal_convertor_t::flags & CONVERTOR_NO_OP)
      for (iov_count)
        memcpy
      convertor->flags |= CONVERTOR_COMPLETED
    else
      opal_convertor_t::fAdvance
        opal_convertor_t::flags |= CONVERTOR_COMPLETED

マクロ
================================================================

``CONVERTOR_*`` フラグ
----------------------------------------------------------------

``CONVERTOR_DATATYPE_MASK``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_t::flags`` には、 ``OPAL_DATATYPE_FLAG_*`` フラグと
``CONVERTOR_*`` フラグのbitwise ORが設定される。そのうちの
``OPAL_DATATYPE_FLAG_*`` フラグのみを取り出すためのマスク。

``CONVERTOR_SEND_CONVERSION``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


``CONVERTOR_RECV``
^^^^^^^^^^^^^^^^^^


``CONVERTOR_SEND``
^^^^^^^^^^^^^^^^^^


``CONVERTOR_HOMOGENEOUS``
^^^^^^^^^^^^^^^^^^^^^^^^^


``CONVERTOR_NO_OP``
^^^^^^^^^^^^^^^^^^^

データ変換は単純なメモリコピーで済むことを示す。

たとえば、homogeneous環境で、 ``OPAL_DATATYPE_FLAG_NO_GAPS`` フラグが
設定されているdatatype、または、 ``OPAL_DATATYPE_FLAG_CONTIGUOUS``
フラグが設定されていてデータの個数が1つの場合に、設定される。

このフラグが設定されていない場合は、 ``pStack`` を用いたデータ変換が
行われる。

``CONVERTOR_WITH_CHECKSUM``
^^^^^^^^^^^^^^^^^^^^^^^^^^^


``CONVERTOR_CUDA``
^^^^^^^^^^^^^^^^^^


``CONVERTOR_CUDA_ASYNC``
^^^^^^^^^^^^^^^^^^^^^^^^


``CONVERTOR_TYPE_MASK``
^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_t::flags`` には、 ``OPAL_DATATYPE_FLAG_*`` フラグと
``CONVERTOR_*`` フラグのbitwise ORが設定される。そのうちの変換の状態を
示す ``CONVERTOR_STATE_*`` と ``CONVERTOR_COMPLETED`` 以外の
``CONVERTOR_FLAG_*`` フラグのみを取り出すためのマスク。

``CONVERTOR_STATE_START``
^^^^^^^^^^^^^^^^^^^^^^^^^

未使用のマクロ。

``CONVERTOR_STATE_COMPLETE``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

未使用のマクロ。

``CONVERTOR_STATE_ALLOC``
^^^^^^^^^^^^^^^^^^^^^^^^^

未使用のマクロ。

``CONVERTOR_COMPLETED``
^^^^^^^^^^^^^^^^^^^^^^^

データ変換が完了したことを示す。

datatypeのサイズが0のときやデータの個数が0のときなど、変換が必要ない
ときには、データ変換の初期化の時点で、このフラグが設定される。変換が
必要なときは、データ変換が完了した時点で、このフラグが設定される。

``CONVERTOR_CUDA_UNIFIED``
^^^^^^^^^^^^^^^^^^^^^^^^^^

``OPAL_CONVERTOR_PREPARE``
----------------------------------------------------------------

    This macro will initialize a convertor based on a previously created
    convertor. The idea is the move outside these function the heavy
    selection of architecture features for the convertors. I consider
    here that the convertor is clean, either never initialized or already
    cleaned.

構造体・共用体
================================================================

``opal_convertor_t``
----------------------------------------------------------------

あるdatatypeによるメモリ配置のデータを別のメモリ配置に変換する、
もしくはその逆を行うための情報。

変換中の状態の情報は、 ``pStack``, ``stack_pos``, ``partial_length``,
``bConverted`` に保存されている。

``super`` (``opal_object_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    basic superclass

``remoteArch`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the remote architecture

``flags`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^

    the properties of this convertor

``local_size`` (``size_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

    overall length data on local machine, compared to bConverted

datatypeのサイズとデータの個数の積。

``remote_size`` (``size_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    overall length data on remote machine, compared to bConverted

homogeneous環境では ``local_size`` と同じ値。

``pDesc`` (``opal_datatype_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the datatype description associated with the convertor

``use_desc`` (``dt_type_desc_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the version used by the convertor (normal or optimized)

変換するdatatypeの ``opal_datatype_t::opt_desc`` の値。

``count`` (``opal_datatype_count_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the total number of full datatype elements

``stack_size`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    size of the allocated stack

``pStack`` 配列として確保されているメモリ領域の配列要素数。

この値は ``pStack`` 配列で実際に使用される要素数より大きいことがある。

``pBaseBuf`` (``unsigned char *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    initial buffer as supplied by the user

``pStack`` (``dt_stack_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the local stack for the actual conversion

データ変換の作業用の ``dt_stack`` 配列のメモリ領域へのポインタ。

``opal_convertor_t::flags`` に ``CONVERTOR_NO_OP`` フラグが立っている
場合は使用されない。

1つのデータ変換が複数回に分けられて行われる場合は、 ``stack_pos``,
``partial_length`` と合わせて、データ変換をどこまで行ってあり
次にどこから再開するかの情報を表す。

``OPAL_CONVERTOR_PREPARE`` 関数マクロで、
``opal_datatype_t::btypes[OPAL_DATATYPE_LOOP]``
(``opal_datatype_t::desc.desc`` 配列内の ``ddt_loop_desc_t`` の数)に
1を足した要素数だけメモリが確保される。その値が ``DT_STATIC_STACK_SIZE``
以下であれば ``static_stack`` を指し、そうでなければ ``malloc`` された
領域を指す。

``pStack`` 配列の最初の要素(``pStack[0]``)は、データの要素数
(``opal_datatype_t::count``)分の繰り返しに対応し、以下に初期化される。::

    .index = -1
    .type  = OPAL_DATATYPE_LOOP
    .count = count
    .disp  = 0

datatypeの ``opal_datatype_t::opt_desc`` 配列の中で、これに対応する
``ddt_loop_desc_t`` オブジェクトは存在せず、配列の最初の要素の直前
(``.index = -1``)に仮想的な ``ddt_loop_desc_t`` オブジェクトがあると
みなす。これに対応する ``ddt_end_loop_desc_t`` オブジェクトは配列の
最後に存在する。これが、datatypeの ``opal_datatype_t::opt_desc`` 配列の
最後に余分な ``ddt_end_loop_desc_t`` オブジェクトが存在する理由である。

``pStack`` 配列の2つ目の要素(``pStack[1]``)はdatatypeの1番浅い
繰り返しに対応し、 ``pStack`` 配列の3つ目の要素(``pStack[2]``)は
datatypeの2番目に浅い繰り返しに対応する。

datatypeの ``opal_datatype_t::opt_desc`` 配列の最初の要素が
``ddt_loop_desc_t`` オブジェクトである場合(``OPAL_DATATYPE_LOOP`` の
場合)は、 ``pStack`` 配列の2つ目の要素はその繰り返しに対応し、以下に
初期化される。::

    .index = 0
    .type  = OPAL_DATATYPE_LOOP
    .count = .use_desc->desc[0].loop.loops
    .disp  = 0

datatypeの ``opal_datatype_t::opt_desc`` 配列の最初の要素が
``ddt_elem_desc_t`` オブジェクトの場合(``OPAL_DATATYPE_LOOP`` 以外の
場合)は、 ``pStack`` 配列の2つ目の要素はそのdatatypeの個数に対応し、
以下に初期化される。::

    .index = 0
    .type  = .use_desc->desc[0].elem..common.type
    .count = .use_desc->desc[0].elem.count
    .disp  = 0

``fAdvance`` (``convertor_advance_fct_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    pointer to the pack/unpack functions

``opal_convertor_prepare_for_send`` 関数より引用::

    if( convertor->flags & CONVERTOR_WITH_CHECKSUM ) {
        if( datatype->flags & OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
            if( ((datatype->ub - datatype->lb) == (OPAL_PTRDIFF_TYPE)datatype->size)
                || (1 >= convertor->count) )
                convertor->fAdvance = opal_pack_homogeneous_contig_checksum;
            else
                convertor->fAdvance = opal_pack_homogeneous_contig_with_gaps_checksum;
        } else {
            convertor->fAdvance = opal_generic_simple_pack_checksum;
        }
    } else {
        if( datatype->flags & OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
            if( ((datatype->ub - datatype->lb) == (OPAL_PTRDIFF_TYPE)datatype->size)
                || (1 >= convertor->count) )
                convertor->fAdvance = opal_pack_homogeneous_contig;
            else
                convertor->fAdvance = opal_pack_homogeneous_contig_with_gaps;
        } else {
            convertor->fAdvance = opal_generic_simple_pack;
        }
    }

``opal_convertor_prepare_for_recv`` 関数より引用::

    if( convertor->flags & CONVERTOR_WITH_CHECKSUM ) {
    #if OPAL_ENABLE_HETEROGENEOUS_SUPPORT
        if( !(convertor->flags & CONVERTOR_HOMOGENEOUS) ) {
            convertor->fAdvance = opal_unpack_general_checksum;
        } else
    #endif
        if( convertor->pDesc->flags & OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
            convertor->fAdvance = opal_unpack_homogeneous_contig_checksum;
        } else {
            convertor->fAdvance = opal_generic_simple_unpack_checksum;
        }
    } else {
    #if OPAL_ENABLE_HETEROGENEOUS_SUPPORT
        if( !(convertor->flags & CONVERTOR_HOMOGENEOUS) ) {
            convertor->fAdvance = opal_unpack_general;
        } else
    #endif
        if( convertor->pDesc->flags & OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
            convertor->fAdvance = opal_unpack_homogeneous_contig;
        } else {
            convertor->fAdvance = opal_generic_simple_unpack;
        }
    }


``master`` (``opal_convertor_master_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the master convertor

``stack_pos`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    the actual position on the stack

1に初期化される。

``partial_length`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  amount of data left over from the last unpack

0に初期化される。

``bConverted`` (``size_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

  # of bytes already converted

0に初期化される。

``checksum`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

    checksum computed by pack/unpack operation

``csum_ui1`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

    partial checksum computed by pack/unpack operation

``csum_ui2`` (``size_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^

    partial checksum computed by pack/unpack operation

``static_stack`` (``dt_stack_t[DT_STATIC_STACK_SIZE]``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    local stack for small datatypes

``pStack`` 配列のメモリ確保時に、必要な配列要素数が ``DT_STATIC_STACK_SIZE``
以下であれば、 ``malloc`` のコストを避けるために、この配列が使用される。

``cbmemcpy`` (``memcpy_fct_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``OPAL_CUDA_SUPPORT`` が真の場合のみ。

    memcpy or cuMemcpy

``stream`` (``void *``)
^^^^^^^^^^^^^^^^^^^^^^^

``OPAL_CUDA_SUPPORT`` が真の場合のみ。

    CUstream for async copy

``opal_convertor_master_t``
----------------------------------------------------------------

``next`` (``opal_convertor_master_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



``remote_arch`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



``flags`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^



``hetero_mask`` (``uint32_t``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



``remote_sizes`` (``size_t[OPAL_DATATYPE_MAX_PREDEFINED]``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



``pFunctions`` (``conversion_fct_t *``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



``dt_stack_t``
----------------------------------------------------------------

datatypeのtype mapに応じてデータ変換を行うときに一時的に使用する構造体。

1つの ``dt_stack_t`` オブジェクトが1つの繰り返し(1組の ``ddt_loop_desc_t`` と
``ddt_endloop_desc_t``)に対応する。

ただし、``MPI_Send`` 関数のようにあるdatatypeのデータが複数(``count``)個
指定されたときには、 ``dt_type_desc_t::desc`` 配列の最初の要素の直前に
仮想的な ``ddt_loop_desc_t`` オブジェクトがあるとみなす。そのため、
そのときには対応する ``ddt_loop_desc_t`` オブジェクトが存在しない
以下のオブジェクトを ``dt_stack_t`` 配列の先頭に作成して使用する。::

    .index = -1
    .type  = OPAL_DATATYPE_LOOP
    .count = count
    .disp  = 0

また、データ変換が中断した状態の場合は、 ``dt_stack_t`` 配列の最後に
``ddt_elem_desc_t`` に対応する ``dt_stack_t`` オブジェクトが作成され、
1つの繰り返し内でデータ変換をどこまで行ったかの状態のデータを保持する。

例えば、以下のように作成したdatatypeを考える。::

    MPI_Type_vector(4, 5, 6, MPI_UINT16_T, &dt1);
    MPI_Type_create_resized(dt1, 0, 50, &dt2);
    MPI_Type_contiguous(3, dt2, &dt3);
    MPI_Type_create_resized(dt3, 0, 154, &dt);
    MPI_Type_commit(&dt);

これを図で現すと以下である。 ``■`` はデータ2バイト(``uint16_t`` 1個)、
``□`` は隙間2バイトを示す。::

    ■■■■■□■■■■■□■■■■■□■■■■■□□
    ■■■■■□■■■■■□■■■■■□■■■■■□□
    ■■■■■□■■■■■□■■■■■□■■■■■□□
    □□

このdatatypeの ``opal_datatype_t::desc.desc`` 配列は以下になる。::

    [0] = {
        .loop = {
            .common = {
                .type = OPAL_DATATYPE_LOOP
            },
            .loops = 3, // <1st argument of MPI_Type_contiguous>
            .items = 4, // 4 - 0
            .extent = 50
        }
    },
    [1] = {
        .loop = {
            .common = {
                .type = OPAL_DATATYPE_LOOP
            },
            .loops = 4, // <1st argument of MPI_Type_vector>
            .items = 2, // 3 - 1
            .extent = 12 // sizeof(uint16_t) * <3rd argument of MPI_Type_vector>
        }
    },
    [2] = {
        elem = {
            .common = {
                .type = OPAL_DATATYPE_INT2
            },
            .count = 5, // <2nd argument of MPI_Type_vector>
            .extent = 2, // sizeof(uint16_t)
            .disp = 0
        }
    },
    [3] = {
        .end_loop = {
            .common = {
                .type = OPAL_DATATYPE_END_LOOP
            },
            .items = 2, // [1].items
            .size = 10, // sizeof(uint16_t) * 5
            .first_elem_disp = 0
        }
    },
    [4] = {
        .end_loop = {
            .common = {
                .type = OPAL_DATATYPE_END_LOOP
            },
            .items = 4, // [0].items
            .size = 40, // sizeof(uint16_t) * 5 * 4
            .first_elem_disp = 0
        }
    },
    [5] = {
        .end_loop = {
            .common = {
                .type = OPAL_DATATYPE_END_LOOP
            },
            .items = 5, // 5 - 0
            .size = 120, // sizeof(uint16_t) * 5 * 4 * 3
            .first_elem_disp = 0
        }
    }

このdatatypeの ``opal_datatype_t::opt_desc.desc`` 配列は、
``opal_datatype_t::desc.desc`` 配列の ``[2]`` が以下に変わった
ものになる。::

    [2] = {
        elem = {
            .common = {
                .type = OPAL_DATATYPE_INT1
            },
            .count = 10, // sizeof(uint16_t) * <2nd argument of MPI_Type_vector>
            .extent = 1, // sizeof(uint8_t)
            .disp = 0
        }
    }

このdatatypeのデータを以下のように2要素だけ送受信する場合を考える。::

    MPI_Sendrecv(sbuf, 2, dt, rank, tag, rbuf, 2, dt, rank, tag,
                 MPI_COMM_SELF, MPI_STATUS_IGNORE);

この通信と同じことをプログラム内で ``memcpy`` しようとすると、以下のような
3重ループになるであろう。::

    disp = 0;
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 3; j++) {
            for (k = 0; k < 4; k++) {
                memcpy(&rbuf[disp], &sbuf[disp], 5 * sizeof(uint16_t));
                disp += 6;
            }
            disp += 1;
        }
        disp += 2;
    }

この3重ループを、 ``i = 0``, ``j = 0``, ``k = 0`` で最初の ``memcpy`` を
実行するときには、 ``opal_convertor_t::pStack`` 配列は以下の状態になる。::

    [0] = {
        .index = -1,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 2,
        .disp  = 0
    },
    [1] = {
        .index = 0,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 3,
        .disp  = 0
    },
    [2] = {
        .index = 1,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 4,
        .disp  = 0
    },

この3重ループを、 ``i = 1``, ``j = 2``, ``k = 3`` で最後の ``memcpy`` を
実行するときには、 ``opal_convertor_t::pStack`` 配列は以下の状態になる。::

    [0] = {
        .index = -1,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 0,
        .disp  = 154 // 154 * 1
    },
    [1] = {
        .index = 0,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 0,
        .disp  = 254 // 154 + 50 * 2
    },
    [2] = {
        .index = 1,
        .type  = OPAL_DATATYPE_LOOP,
        .count = 0,
        .disp  = 290 // 254 + 12 * 3
    },

さらに、バッファ不足のためなどに ``memcpy`` が ``5 * sizeof(uint16_t)``
ではなく ``5 * sizeof(uint16_t)`` だけ行われてデータ変換が中断した状態の
場合には、上記の ``opal_convertor_t::pStack`` 配列の最後に以下が追加された
状態になる。::

    [3] = {
        .index = 2,
        .type  = OPAL_DATATYPE_UINT2,
        .count = 3, /* 5 - 2 */
        .disp  = 294 // 254 + 12 * 3 + 2 * sizeof(uint16_t)
    },

``index`` (``int32_t``)
^^^^^^^^^^^^^^^^^^^^^^^

    index in the element description

対応する ``ddt_loop_desc_t`` または ``ddt_elem_desc_t`` の、
``dt_type_desc_t::desc`` 配列でのindex。

繰り返しを開始するとき(``ddt_loop_desc_t``)またはデータ変換を中断したとき
(``ddt_elem_desc_t``)に設定される。

``type`` (``int16_t``)
^^^^^^^^^^^^^^^^^^^^^^

    the type used for the last pack/unpack (original or
    OPAL\_DATATYPE\_UINT1)

対応する ``ddt_loop_desc_t`` または ``ddt_elem_desc_t`` の、
``ddt_loop_desc_t::common.type`` または ``ddt_elem_desc_t::common.type`` 。

繰り返しを開始するとき(``ddt_loop_desc_t``)またはデータ変換を中断したとき
(``ddt_elem_desc_t``)に設定される。

``count`` (``size_t``)
^^^^^^^^^^^^^^^^^^^^^^

    number of times we still have to do it

繰り返しの残りの回数。

回数には現在処理中の繰り返しも含む。

繰り返しを開始するときに、対応する ``ddt_loop_desc_t`` の ``loops`` の
値に設定される。そして、繰り返しの内容を1回処理するごとに、減算される。

データ変換を中断するときに、対応する ``ddt_elem_desc_t`` の ``count`` の
値からデータ変換済みの個数を引いた値に、設定される。

``disp`` (``OPAL_PTRDIFF_TYPE``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    actual displacement depending on the count field

繰り返しの現在の状態における、 ``ddt_elem_desc_t::disp`` に加算しなければ
ならないdisplacement。言い方を変えると、 ``ddt_elem_desc_t::disp`` が
0だった場合の、メモリ領域先頭からの現在のdisplacement。

繰り返しを開始するときに、その時点での1つ浅い繰り返しの
``dt_stack_t::disp`` の値に設定される。そして、繰り返しの内容を
1回処理するごとに、対応する ``ddt_loop_desc_t`` の ``extent`` の値だけ
加算される。

データ変換を中断するときに、次に処理するdisplacementに設定される。

関数
================================================================

``opal_convertor_copy_and_prepare_for_send``
----------------------------------------------------------------

送信のためにconvertorを初期化する。

``opal_convertor_t::remoteArch``, ``opal_convertor_t::flags``,
``opal_convertor_t::master`` を第1引数の ``pSrcConv`` からコピーして
``opal_convertor_prepare_for_send`` 関数を呼ぶ。

なお、第1引数の ``pSrcConv`` は、Open MPIのhomogeneous環境では、
``&ompi_mpi_local_convertor`` が渡ってくる。

``pSrcConv`` (``opal_convertor_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_::remoteArch``, ``opal_convertor_t::flags``,
``opal_convertor_t::master`` のコピー元となるconvertor。

``datatype`` (``opal_datatype_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータのdatatype。

``count`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータの個数。

``pUserBuf`` (``void *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータの先頭へのポインタ。

``flags`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_t::flags`` に追加(bitwise OR)する ``CONVERTOR_*`` フラグ。

``convertor`` (``opal_convertor_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

設定するconvertor。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

``OPAL_SUCCESS``
  成功。

``opal_convertor_copy_and_prepare_for_recv``
----------------------------------------------------------------

受信のためにconvertorを初期化する。

``opal_convertor_t::remoteArch``, ``opal_convertor_t::flags``,
``opal_convertor_t::master`` を第1引数の ``pSrcConv`` からコピーして
``opal_convertor_prepare_for_recv`` 関数を呼ぶ。

なお、第1引数の ``pSrcConv`` は、Open MPIのhomogeneous環境では、
``&ompi_mpi_local_convertor`` が渡ってくる。

``pSrcConv`` (``opal_convertor_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_::remoteArch``, ``opal_convertor_t::flags``,
``opal_convertor_t::master`` のコピー元となるconvertor。

``datatype`` (``opal_datatype_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータのdatatype。

``count`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータの最大個数。

``pUserBuf`` (``void *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータの先頭へのポインタ。

``flags`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``opal_convertor_t::flags`` に追加(bitwise OR)する ``CONVERTOR_*`` フラグ。

``convertor`` (``opal_convertor_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

設定するconvertor。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

``OPAL_SUCCESS``
  成功。

``opal_convertor_prepare_for_send``
----------------------------------------------------------------

送信のためにconvertorを初期化する。

``convertor`` (``opal_convertor_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

設定するconvertor。

``datatype`` (``opal_datatype_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータのdatatype。

``count`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータの個数。

``pUserBuf`` (``void *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

送信前のデータの先頭へのポインタ。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

``OPAL_SUCCESS``
  成功。

``opal_convertor_prepare_for_recv``
----------------------------------------------------------------

受信のためにconvertorを初期化する。

``convertor`` (``opal_convertor_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

設定するconvertor。

``datatype`` (``opal_datatype_t *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータのdatatype。

``count`` (``int32_t``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータの最大個数。

``pUserBuf`` (``void *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

受信後のデータの先頭へのポインタ。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

``OPAL_SUCCESS``
  成功。

``opal_convertor_pack``
----------------------------------------------------------------

第1引数の ``pConv`` で示されるデータを、第2引数の ``iov`` と第3引数
``out_size`` で示される1つ以上の連続なメモリ領域にpackする。

``pConv->local_size`` の値と ``iov[].iov_len`` の値の和が異なって
いてもよい。異なる場合は、小さい値に合わせてpackする。変換した
データの量(バイト数)は ``pConv->bConverted`` に保存されるため、同じ
``opal_convertor_t`` オブジェクトを使用して次にこの関数を呼んだ場合は、
前の続きのデータからpackされる。

すべてのデータを変換したら、 ``pConv->flags`` に ``CONVERTOR_COMPLETED`` が
設定される。

``pConv`` (``opal_convertor_t *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

convertor。

``iov`` (``struct iovec *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

関数呼び出し時(IN)は、変換先のメモリ領域(先頭ポインタとサイズ)を示す配列。

関数復帰時(OUT)は、 ``iovec::iov_len`` が、そのメモリ領域にpackしたデータの
量(バイト数)に設定される。

``out_size`` (``uint32_t *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

関数呼び出し時(IN)は、 ``iov`` 配列の要素数。

関数復帰時(OUT)は、 ``iov`` 配列の消費要素数。

``max_data`` (``size_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

変換したデータの量(バイト数)。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

0
  データ変換は未完了。
1
  データ変換は完了。

``opal_convertor_unpack``
----------------------------------------------------------------

第2引数の ``iov`` と第3引数 ``out_size`` で示される1つ以上の連続な
メモリ領域のデータを、第1引数の ``pConv`` で示されるメモリ領域に、
unpackする。

``pConv->local_size`` の値と ``iov[].iov_len`` の値の和が異なって
いてもよい。異なる場合は、小さい値に合わせてunpackする。変換した
データの量(バイト数)は ``pConv->bConverted`` に保存されるため、同じ
``opal_convertor_t`` オブジェクトを使用して次にこの関数を呼んだ場合は、
前の続きのデータからunpackされる。

すべてのデータを変換したら、 ``pConv->flags`` に ``CONVERTOR_COMPLETED`` が
設定される。

``pConv`` (``opal_convertor_t *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

convertor。

``iov`` (``struct iovec *``) [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

変換元のメモリ領域(先頭ポインタとサイズ)を示す配列。

``out_size`` (``uint32_t *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

関数呼び出し時(IN)は、 ``iov`` 配列の要素数。

関数復帰時(OUT)は、 ``iov`` 配列の消費要素数。

``max_data`` (``size_t *``) [OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

変換したデータの量(バイト数)。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

0
  データ変換は未完了。
1
  データ変換は完了。

``opal_convertor_set_position``
----------------------------------------------------------------

データ変換の現在位置(データ変換をどこまで行ってあり次にどこから再開
するか)を ``*position`` バイトの位置に設定する。

``convertor->bConverted``, ``convertor->pStack``, ``convertor->stack_pos``,
``convertor->partial_length`` の値を設定する。

``convertor`` (``opal_convertor_t *``) [IN/OUT]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

convertor。

``position`` ``size_t *`` [IN]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

設定するデータ変換の現在位置。

先頭からのバイト数で指定する。

return (``int32_t``)
^^^^^^^^^^^^^^^^^^^^

``OPAL_SUCCESS``
  成功。

その他の ``OPAL_*`` のエラーコード
  エラー。

.. header:: Back to: `[Open MPIのソース読みのメモ] <../openmpi-source-reading.en.xhtml>`_

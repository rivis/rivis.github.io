<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="generator" content="Docutils 0.14: http://docutils.sourceforge.net/" />
    <title>opal_convertor_t (OPALのconvertor)</title>
    <link rel="stylesheet" href="../../../css/docutils-report.css" type="text/css" />
  </head>
  <body>
    <div class="header">

Back to: <a class="reference external" href="../openmpi-source-reading.ja.xhtml">[Open MPIのソース読みのメモ]</a>
<hr class="header" />
</div>
    <div class="document" id="opal-convertor-t-opalconvertor">
      <h1 class="title"><tt class="docutils literal">opal_convertor_t</tt> (OPALのconvertor)</h1>
<!-- style: docutils-report -->
      <p>
2014年11月ごろの <a class="reference external" href="https://www.open-mpi.org/">Open MPI</a> の
<tt class="docutils literal">opal_convertor_t</tt> 関連のソースを読んだときのメモ。</p>
      <div class="contents topic" id="id1">
        <p class="topic-title first">目次</p>
        <ul class="simple">
          <li>
            <a class="reference internal" href="#id2" id="id31">概要</a>
          </li>
          <li>
            <a class="reference internal" href="#id3" id="id32">マクロ</a>
            <ul>
              <li>
                <a class="reference internal" href="#convertor" id="id33"><tt class="docutils literal">CONVERTOR_*</tt> フラグ</a>
                <ul>
                  <li>
                    <a class="reference internal" href="#convertor-datatype-mask" id="id34">
                      <tt class="docutils literal">CONVERTOR_DATATYPE_MASK</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-send-conversion" id="id35">
                      <tt class="docutils literal">CONVERTOR_SEND_CONVERSION</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-recv" id="id36">
                      <tt class="docutils literal">CONVERTOR_RECV</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-send" id="id37">
                      <tt class="docutils literal">CONVERTOR_SEND</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-homogeneous" id="id38">
                      <tt class="docutils literal">CONVERTOR_HOMOGENEOUS</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-no-op" id="id39">
                      <tt class="docutils literal">CONVERTOR_NO_OP</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-with-checksum" id="id40">
                      <tt class="docutils literal">CONVERTOR_WITH_CHECKSUM</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-cuda" id="id41">
                      <tt class="docutils literal">CONVERTOR_CUDA</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-cuda-async" id="id42">
                      <tt class="docutils literal">CONVERTOR_CUDA_ASYNC</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-type-mask" id="id43">
                      <tt class="docutils literal">CONVERTOR_TYPE_MASK</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-state-start" id="id44">
                      <tt class="docutils literal">CONVERTOR_STATE_START</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-state-complete" id="id45">
                      <tt class="docutils literal">CONVERTOR_STATE_COMPLETE</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-state-alloc" id="id46">
                      <tt class="docutils literal">CONVERTOR_STATE_ALLOC</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-completed" id="id47">
                      <tt class="docutils literal">CONVERTOR_COMPLETED</tt>
                    </a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-cuda-unified" id="id48">
                      <tt class="docutils literal">CONVERTOR_CUDA_UNIFIED</tt>
                    </a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-prepare" id="id49">
                  <tt class="docutils literal">OPAL_CONVERTOR_PREPARE</tt>
                </a>
              </li>
            </ul>
          </li>
          <li>
            <a class="reference internal" href="#id4" id="id50">構造体・共用体</a>
            <ul>
              <li>
                <a class="reference internal" href="#opal-convertor-t" id="id51">
                  <tt class="docutils literal">opal_convertor_t</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#super-opal-object-t" id="id52"><tt class="docutils literal">super</tt> (<tt class="docutils literal">opal_object_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#remotearch-uint32-t" id="id53"><tt class="docutils literal">remoteArch</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#flags-uint32-t" id="id54"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#local-size-size-t" id="id55"><tt class="docutils literal">local_size</tt> (<tt class="docutils literal">size_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#remote-size-size-t" id="id56"><tt class="docutils literal">remote_size</tt> (<tt class="docutils literal">size_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#pdesc-opal-datatype-t" id="id57"><tt class="docutils literal">pDesc</tt> (<tt class="docutils literal">opal_datatype_t *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#use-desc-dt-type-desc-t" id="id58"><tt class="docutils literal">use_desc</tt> (<tt class="docutils literal">dt_type_desc_t *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#count-opal-datatype-count-t" id="id59"><tt class="docutils literal">count</tt> (<tt class="docutils literal">opal_datatype_count_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#stack-size-uint32-t" id="id60"><tt class="docutils literal">stack_size</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#pbasebuf-unsigned-char" id="id61"><tt class="docutils literal">pBaseBuf</tt> (<tt class="docutils literal">unsigned char *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#pstack-dt-stack-t" id="id62"><tt class="docutils literal">pStack</tt> (<tt class="docutils literal">dt_stack_t *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#fadvance-convertor-advance-fct-t" id="id63"><tt class="docutils literal">fAdvance</tt> (<tt class="docutils literal">convertor_advance_fct_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#master-opal-convertor-master-t" id="id64"><tt class="docutils literal">master</tt> (<tt class="docutils literal">opal_convertor_master_t *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#stack-pos-uint32-t" id="id65"><tt class="docutils literal">stack_pos</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#partial-length-uint32-t" id="id66"><tt class="docutils literal">partial_length</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#bconverted-size-t" id="id67"><tt class="docutils literal">bConverted</tt> (<tt class="docutils literal">size_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#checksum-uint32-t" id="id68"><tt class="docutils literal">checksum</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#csum-ui1-uint32-t" id="id69"><tt class="docutils literal">csum_ui1</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#csum-ui2-size-t" id="id70"><tt class="docutils literal">csum_ui2</tt> (<tt class="docutils literal">size_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#static-stack-dt-stack-t-dt-static-stack-size" id="id71"><tt class="docutils literal">static_stack</tt> (<tt class="docutils literal">dt_stack_t[DT_STATIC_STACK_SIZE]</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#cbmemcpy-memcpy-fct-t" id="id72"><tt class="docutils literal">cbmemcpy</tt> (<tt class="docutils literal">memcpy_fct_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#stream-void" id="id73"><tt class="docutils literal">stream</tt> (<tt class="docutils literal">void *</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-master-t" id="id74">
                  <tt class="docutils literal">opal_convertor_master_t</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#next-opal-convertor-master-t" id="id75"><tt class="docutils literal">next</tt> (<tt class="docutils literal">opal_convertor_master_t *</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#remote-arch-uint32-t" id="id76"><tt class="docutils literal">remote_arch</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id5" id="id77"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#hetero-mask-uint32-t" id="id78"><tt class="docutils literal">hetero_mask</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#remote-sizes-size-t-opal-datatype-max-predefined" id="id79"><tt class="docutils literal">remote_sizes</tt> (<tt class="docutils literal">size_t[OPAL_DATATYPE_MAX_PREDEFINED]</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#pfunctions-conversion-fct-t" id="id80"><tt class="docutils literal">pFunctions</tt> (<tt class="docutils literal">conversion_fct_t *</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#dt-stack-t" id="id81">
                  <tt class="docutils literal">dt_stack_t</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#index-int32-t" id="id82"><tt class="docutils literal">index</tt> (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#type-int16-t" id="id83"><tt class="docutils literal">type</tt> (<tt class="docutils literal">int16_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#count-size-t" id="id84"><tt class="docutils literal">count</tt> (<tt class="docutils literal">size_t</tt>)</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#disp-opal-ptrdiff-type" id="id85"><tt class="docutils literal">disp</tt> (<tt class="docutils literal">OPAL_PTRDIFF_TYPE</tt>)</a>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>
            <a class="reference internal" href="#id6" id="id86">関数</a>
            <ul>
              <li>
                <a class="reference internal" href="#opal-convertor-copy-and-prepare-for-send" id="id87">
                  <tt class="docutils literal">opal_convertor_copy_and_prepare_for_send</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#psrcconv-opal-convertor-t-in" id="id88"><tt class="docutils literal">pSrcConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#datatype-opal-datatype-t-in" id="id89"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#count-int32-t-in" id="id90"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#puserbuf-void-in" id="id91"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#flags-int32-t-in" id="id92"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#convertor-opal-convertor-t-out" id="id93"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#return-int32-t" id="id94">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-copy-and-prepare-for-recv" id="id95">
                  <tt class="docutils literal">opal_convertor_copy_and_prepare_for_recv</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#id7" id="id96"><tt class="docutils literal">pSrcConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id8" id="id97"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id9" id="id98"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id10" id="id99"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id11" id="id100"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id12" id="id101"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id13" id="id102">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-prepare-for-send" id="id103">
                  <tt class="docutils literal">opal_convertor_prepare_for_send</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#id14" id="id104"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id15" id="id105"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id16" id="id106"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id17" id="id107"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id18" id="id108">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-prepare-for-recv" id="id109">
                  <tt class="docutils literal">opal_convertor_prepare_for_recv</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#id19" id="id110"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id20" id="id111"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id21" id="id112"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id22" id="id113"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id23" id="id114">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-pack" id="id115">
                  <tt class="docutils literal">opal_convertor_pack</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#pconv-opal-convertor-t-in-out" id="id116"><tt class="docutils literal">pConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#iov-struct-iovec-in-out" id="id117"><tt class="docutils literal">iov</tt> (<tt class="docutils literal">struct iovec *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#out-size-uint32-t-in-out" id="id118"><tt class="docutils literal">out_size</tt> (<tt class="docutils literal">uint32_t *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#max-data-size-t-out" id="id119"><tt class="docutils literal">max_data</tt> (<tt class="docutils literal">size_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id24" id="id120">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-unpack" id="id121">
                  <tt class="docutils literal">opal_convertor_unpack</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#id25" id="id122"><tt class="docutils literal">pConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#iov-struct-iovec-in" id="id123"><tt class="docutils literal">iov</tt> (<tt class="docutils literal">struct iovec *</tt>) [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id26" id="id124"><tt class="docutils literal">out_size</tt> (<tt class="docutils literal">uint32_t *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id27" id="id125"><tt class="docutils literal">max_data</tt> (<tt class="docutils literal">size_t *</tt>) [OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id28" id="id126">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
              <li>
                <a class="reference internal" href="#opal-convertor-set-position" id="id127">
                  <tt class="docutils literal">opal_convertor_set_position</tt>
                </a>
                <ul>
                  <li>
                    <a class="reference internal" href="#convertor-opal-convertor-t-in-out" id="id128"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#position-size-t-in" id="id129"><tt class="docutils literal">position</tt><tt class="docutils literal">size_t *</tt> [IN]</a>
                  </li>
                  <li>
                    <a class="reference internal" href="#id29" id="id130">return (<tt class="docutils literal">int32_t</tt>)</a>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </div>
      <div class="section" id="id2">
        <h1>
          <a class="toc-backref" href="#id31">概要</a>
        </h1>
        <p>
あるdatatypeによるメモリ配置のデータを別のメモリ配置に変換する、もしくはその逆を行う場合は、 <tt class="docutils literal">opal_convertor_t</tt> オブジェクトを作成・使用して、処理を行う。</p>
        <p>
このデータ変換は、例えば、あるdatatypeのデータを連続なメモリ領域へpack、連続なメモリ領域にあるデータをあるdatatypeのメモリ領域へunpack、などが該当する。</p>
        <p><tt class="docutils literal">opal_datatype_t</tt> オブジェクトはdatatypeと一対一に対応するが、
<tt class="docutils literal">opal_convertor_t</tt> オブジェクトは1回のデータ変換と一対一に対応する。つまり、1回のデータ変換に対して1個の <tt class="docutils literal">opal_convertor_t</tt> オブジェクトが必要になり、データ変換をどこまで行ったかの状態のデータを保持する。</p>
        <p>
ob1 PMLにおけるstandard modeでのeager送信時の関数呼び出しの流れ:</p>
        <pre class="literal-block">
opal_convertor_copy_and_prepare_for_send
  opal_convertor_prepare_for_send
    OPAL_CONVERTOR_PREPARE
      if (count == 0 || opal_datatype_t::size == 0)
        opal_convertor_t::flags |= CONVERTOR_COMPLETED
      else if (((opal_convertor_t::flags &amp; OPAL_DATATYPE_FLAG_NO_GAPS)) ||
               ((opal_convertor_t::flags &amp; OPAL_DATATYPE_CONTIGUOUS) &amp;&amp;
                count == 1))
        opal_convertor_t::flags |= CONVERTOR_NO_OP
      else
        opal_convertor_create_stack_at_begining
opal_convertor_pack
  OPAL_CONVERTOR_SET_STATUS_BEFORE_PACK_UNPACK
  if (opal_convertor_t::flags &amp; CONVERTOR_NO_OP)
    for (iov_count)
      memcpy
    convertor-&gt;flags |= CONVERTOR_COMPLETED
  else
    opal_convertor_t::fAdvance
      opal_convertor_t::flags |= CONVERTOR_COMPLETED
</pre>
        <p>
ob1 PMLにおけるstandard modeでのeager受信時の関数呼び出しの流れ:</p>
        <pre class="literal-block">
opal_convertor_copy_and_prepare_for_recv
  opal_convertor_prepare_for_recv
    OPAL_CONVERTOR_PREPARE
      if (count == 0 || opal_datatype_t::size == 0)
        opal_convertor_t::flags |= CONVERTOR_COMPLETED
      else if (((opal_convertor_t::flags &amp; OPAL_DATATYPE_FLAG_NO_GAPS)) ||
               ((opal_convertor_t::flags &amp; OPAL_DATATYPE_CONTIGUOUS) &amp;&amp;
                (count == 1)))
        opal_convertor_t::flags |= CONVERTOR_NO_OP
      else
        opal_convertor_create_stack_at_begining
opal_convertor_unpack
  OPAL_CONVERTOR_SET_STATUS_BEFORE_PACK_UNPACK
  if (opal_convertor_t::flags &amp; CONVERTOR_NO_OP)
    for (iov_count)
      memcpy
    convertor-&gt;flags |= CONVERTOR_COMPLETED
  else
    opal_convertor_t::fAdvance
      opal_convertor_t::flags |= CONVERTOR_COMPLETED
</pre>
      </div>
      <div class="section" id="id3">
        <h1>
          <a class="toc-backref" href="#id32">マクロ</a>
        </h1>
        <div class="section" id="convertor">
          <h2>
            <a class="toc-backref" href="#id33"><tt class="docutils literal">CONVERTOR_*</tt> フラグ</a>
          </h2>
          <div class="section" id="convertor-datatype-mask">
            <h3>
              <a class="toc-backref" href="#id34">
                <tt class="docutils literal">CONVERTOR_DATATYPE_MASK</tt>
              </a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt> には、 <tt class="docutils literal">OPAL_DATATYPE_FLAG_*</tt> フラグと
<tt class="docutils literal">CONVERTOR_*</tt> フラグのbitwise ORが設定される。そのうちの
<tt class="docutils literal">OPAL_DATATYPE_FLAG_*</tt> フラグのみを取り出すためのマスク。</p>
          </div>
          <div class="section" id="convertor-send-conversion">
            <h3>
              <a class="toc-backref" href="#id35">
                <tt class="docutils literal">CONVERTOR_SEND_CONVERSION</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-recv">
            <h3>
              <a class="toc-backref" href="#id36">
                <tt class="docutils literal">CONVERTOR_RECV</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-send">
            <h3>
              <a class="toc-backref" href="#id37">
                <tt class="docutils literal">CONVERTOR_SEND</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-homogeneous">
            <h3>
              <a class="toc-backref" href="#id38">
                <tt class="docutils literal">CONVERTOR_HOMOGENEOUS</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-no-op">
            <h3>
              <a class="toc-backref" href="#id39">
                <tt class="docutils literal">CONVERTOR_NO_OP</tt>
              </a>
            </h3>
            <p>
データ変換は単純なメモリコピーで済むことを示す。</p>
            <p>
たとえば、homogeneous環境で、 <tt class="docutils literal">OPAL_DATATYPE_FLAG_NO_GAPS</tt> フラグが設定されているdatatype、または、 <tt class="docutils literal">OPAL_DATATYPE_FLAG_CONTIGUOUS</tt>
フラグが設定されていてデータの個数が1つの場合に、設定される。</p>
            <p>
このフラグが設定されていない場合は、 <tt class="docutils literal">pStack</tt> を用いたデータ変換が行われる。</p>
          </div>
          <div class="section" id="convertor-with-checksum">
            <h3>
              <a class="toc-backref" href="#id40">
                <tt class="docutils literal">CONVERTOR_WITH_CHECKSUM</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-cuda">
            <h3>
              <a class="toc-backref" href="#id41">
                <tt class="docutils literal">CONVERTOR_CUDA</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-cuda-async">
            <h3>
              <a class="toc-backref" href="#id42">
                <tt class="docutils literal">CONVERTOR_CUDA_ASYNC</tt>
              </a>
            </h3>
          </div>
          <div class="section" id="convertor-type-mask">
            <h3>
              <a class="toc-backref" href="#id43">
                <tt class="docutils literal">CONVERTOR_TYPE_MASK</tt>
              </a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt> には、 <tt class="docutils literal">OPAL_DATATYPE_FLAG_*</tt> フラグと
<tt class="docutils literal">CONVERTOR_*</tt> フラグのbitwise ORが設定される。そのうちの変換の状態を示す <tt class="docutils literal">CONVERTOR_STATE_*</tt> と <tt class="docutils literal">CONVERTOR_COMPLETED</tt> 以外の
<tt class="docutils literal">CONVERTOR_FLAG_*</tt> フラグのみを取り出すためのマスク。</p>
          </div>
          <div class="section" id="convertor-state-start">
            <h3>
              <a class="toc-backref" href="#id44">
                <tt class="docutils literal">CONVERTOR_STATE_START</tt>
              </a>
            </h3>
            <p>
未使用のマクロ。</p>
          </div>
          <div class="section" id="convertor-state-complete">
            <h3>
              <a class="toc-backref" href="#id45">
                <tt class="docutils literal">CONVERTOR_STATE_COMPLETE</tt>
              </a>
            </h3>
            <p>
未使用のマクロ。</p>
          </div>
          <div class="section" id="convertor-state-alloc">
            <h3>
              <a class="toc-backref" href="#id46">
                <tt class="docutils literal">CONVERTOR_STATE_ALLOC</tt>
              </a>
            </h3>
            <p>
未使用のマクロ。</p>
          </div>
          <div class="section" id="convertor-completed">
            <h3>
              <a class="toc-backref" href="#id47">
                <tt class="docutils literal">CONVERTOR_COMPLETED</tt>
              </a>
            </h3>
            <p>
データ変換が完了したことを示す。</p>
            <p>
datatypeのサイズが0のときやデータの個数が0のときなど、変換が必要ないときには、データ変換の初期化の時点で、このフラグが設定される。変換が必要なときは、データ変換が完了した時点で、このフラグが設定される。</p>
          </div>
          <div class="section" id="convertor-cuda-unified">
            <h3>
              <a class="toc-backref" href="#id48">
                <tt class="docutils literal">CONVERTOR_CUDA_UNIFIED</tt>
              </a>
            </h3>
          </div>
        </div>
        <div class="section" id="opal-convertor-prepare">
          <h2>
            <a class="toc-backref" href="#id49">
              <tt class="docutils literal">OPAL_CONVERTOR_PREPARE</tt>
            </a>
          </h2>
          <blockquote>

This macro will initialize a convertor based on a previously created
convertor. The idea is the move outside these function the heavy
selection of architecture features for the convertors. I consider
here that the convertor is clean, either never initialized or already
cleaned.</blockquote>
        </div>
      </div>
      <div class="section" id="id4">
        <h1>
          <a class="toc-backref" href="#id50">構造体・共用体</a>
        </h1>
        <div class="section" id="opal-convertor-t">
          <h2>
            <a class="toc-backref" href="#id51">
              <tt class="docutils literal">opal_convertor_t</tt>
            </a>
          </h2>
          <p>
あるdatatypeによるメモリ配置のデータを別のメモリ配置に変換する、もしくはその逆を行うための情報。</p>
          <p>
変換中の状態の情報は、 <tt class="docutils literal">pStack</tt>, <tt class="docutils literal">stack_pos</tt>, <tt class="docutils literal">partial_length</tt>,
<tt class="docutils literal">bConverted</tt> に保存されている。</p>
          <div class="section" id="super-opal-object-t">
            <h3>
              <a class="toc-backref" href="#id52"><tt class="docutils literal">super</tt> (<tt class="docutils literal">opal_object_t</tt>)</a>
            </h3>
            <blockquote>

basic superclass</blockquote>
          </div>
          <div class="section" id="remotearch-uint32-t">
            <h3>
              <a class="toc-backref" href="#id53"><tt class="docutils literal">remoteArch</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

the remote architecture</blockquote>
          </div>
          <div class="section" id="flags-uint32-t">
            <h3>
              <a class="toc-backref" href="#id54"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

the properties of this convertor</blockquote>
          </div>
          <div class="section" id="local-size-size-t">
            <h3>
              <a class="toc-backref" href="#id55"><tt class="docutils literal">local_size</tt> (<tt class="docutils literal">size_t</tt>)</a>
            </h3>
            <blockquote>

overall length data on local machine, compared to bConverted</blockquote>
            <p>
datatypeのサイズとデータの個数の積。</p>
          </div>
          <div class="section" id="remote-size-size-t">
            <h3>
              <a class="toc-backref" href="#id56"><tt class="docutils literal">remote_size</tt> (<tt class="docutils literal">size_t</tt>)</a>
            </h3>
            <blockquote>

overall length data on remote machine, compared to bConverted</blockquote>
            <p>
homogeneous環境では <tt class="docutils literal">local_size</tt> と同じ値。</p>
          </div>
          <div class="section" id="pdesc-opal-datatype-t">
            <h3>
              <a class="toc-backref" href="#id57"><tt class="docutils literal">pDesc</tt> (<tt class="docutils literal">opal_datatype_t *</tt>)</a>
            </h3>
            <blockquote>

the datatype description associated with the convertor</blockquote>
          </div>
          <div class="section" id="use-desc-dt-type-desc-t">
            <h3>
              <a class="toc-backref" href="#id58"><tt class="docutils literal">use_desc</tt> (<tt class="docutils literal">dt_type_desc_t *</tt>)</a>
            </h3>
            <blockquote>

the version used by the convertor (normal or optimized)</blockquote>
            <p>
変換するdatatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc</span></tt> の値。</p>
          </div>
          <div class="section" id="count-opal-datatype-count-t">
            <h3>
              <a class="toc-backref" href="#id59"><tt class="docutils literal">count</tt> (<tt class="docutils literal">opal_datatype_count_t</tt>)</a>
            </h3>
            <blockquote>

the total number of full datatype elements</blockquote>
          </div>
          <div class="section" id="stack-size-uint32-t">
            <h3>
              <a class="toc-backref" href="#id60"><tt class="docutils literal">stack_size</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

size of the allocated stack</blockquote>
            <p><tt class="docutils literal">pStack</tt> 配列として確保されているメモリ領域の配列要素数。</p>
            <p>
この値は <tt class="docutils literal">pStack</tt> 配列で実際に使用される要素数より大きいことがある。</p>
          </div>
          <div class="section" id="pbasebuf-unsigned-char">
            <h3>
              <a class="toc-backref" href="#id61"><tt class="docutils literal">pBaseBuf</tt> (<tt class="docutils literal">unsigned char *</tt>)</a>
            </h3>
            <blockquote>

initial buffer as supplied by the user</blockquote>
          </div>
          <div class="section" id="pstack-dt-stack-t">
            <h3>
              <a class="toc-backref" href="#id62"><tt class="docutils literal">pStack</tt> (<tt class="docutils literal">dt_stack_t *</tt>)</a>
            </h3>
            <blockquote>

the local stack for the actual conversion</blockquote>
            <p>
データ変換の作業用の <tt class="docutils literal">dt_stack</tt> 配列のメモリ領域へのポインタ。</p>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt> に <tt class="docutils literal">CONVERTOR_NO_OP</tt> フラグが立っている場合は使用されない。</p>
            <p>
1つのデータ変換が複数回に分けられて行われる場合は、 <tt class="docutils literal">stack_pos</tt>,
<tt class="docutils literal">partial_length</tt> と合わせて、データ変換をどこまで行ってあり次にどこから再開するかの情報を表す。</p>
            <p><tt class="docutils literal">OPAL_CONVERTOR_PREPARE</tt> 関数マクロで、
<tt class="docutils literal"><span class="pre">opal_datatype_t::btypes[OPAL_DATATYPE_LOOP]</span></tt>
(<tt class="docutils literal"><span class="pre">opal_datatype_t::desc.desc</span></tt> 配列内の <tt class="docutils literal">ddt_loop_desc_t</tt> の数)に1を足した要素数だけメモリが確保される。その値が <tt class="docutils literal">DT_STATIC_STACK_SIZE</tt>
以下であれば <tt class="docutils literal">static_stack</tt> を指し、そうでなければ <tt class="docutils literal">malloc</tt> された領域を指す。</p>
            <p><tt class="docutils literal">pStack</tt> 配列の最初の要素(<tt class="docutils literal">pStack[0]</tt>)は、データの要素数(<tt class="docutils literal"><span class="pre">opal_datatype_t::count</span></tt>)分の繰り返しに対応し、以下に初期化される。:</p>
            <pre class="literal-block">
.index = -1
.type  = OPAL_DATATYPE_LOOP
.count = count
.disp  = 0
</pre>
            <p>
datatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc</span></tt> 配列の中で、これに対応する
<tt class="docutils literal">ddt_loop_desc_t</tt> オブジェクトは存在せず、配列の最初の要素の直前(<tt class="docutils literal">.index = <span class="pre">-1</span></tt>)に仮想的な <tt class="docutils literal">ddt_loop_desc_t</tt> オブジェクトがあるとみなす。これに対応する <tt class="docutils literal">ddt_end_loop_desc_t</tt> オブジェクトは配列の最後に存在する。これが、datatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc</span></tt> 配列の最後に余分な <tt class="docutils literal">ddt_end_loop_desc_t</tt> オブジェクトが存在する理由である。</p>
            <p><tt class="docutils literal">pStack</tt> 配列の2つ目の要素(<tt class="docutils literal">pStack[1]</tt>)はdatatypeの1番浅い繰り返しに対応し、 <tt class="docutils literal">pStack</tt> 配列の3つ目の要素(<tt class="docutils literal">pStack[2]</tt>)はdatatypeの2番目に浅い繰り返しに対応する。</p>
            <p>
datatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc</span></tt> 配列の最初の要素が
<tt class="docutils literal">ddt_loop_desc_t</tt> オブジェクトである場合(<tt class="docutils literal">OPAL_DATATYPE_LOOP</tt> の場合)は、 <tt class="docutils literal">pStack</tt> 配列の2つ目の要素はその繰り返しに対応し、以下に初期化される。:</p>
            <pre class="literal-block">
.index = 0
.type  = OPAL_DATATYPE_LOOP
.count = .use_desc-&gt;desc[0].loop.loops
.disp  = 0
</pre>
            <p>
datatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc</span></tt> 配列の最初の要素が
<tt class="docutils literal">ddt_elem_desc_t</tt> オブジェクトの場合(<tt class="docutils literal">OPAL_DATATYPE_LOOP</tt> 以外の場合)は、 <tt class="docutils literal">pStack</tt> 配列の2つ目の要素はそのdatatypeの個数に対応し、以下に初期化される。:</p>
            <pre class="literal-block">
.index = 0
.type  = .use_desc-&gt;desc[0].elem..common.type
.count = .use_desc-&gt;desc[0].elem.count
.disp  = 0
</pre>
          </div>
          <div class="section" id="fadvance-convertor-advance-fct-t">
            <h3>
              <a class="toc-backref" href="#id63"><tt class="docutils literal">fAdvance</tt> (<tt class="docutils literal">convertor_advance_fct_t</tt>)</a>
            </h3>
            <blockquote>

pointer to the pack/unpack functions</blockquote>
            <p><tt class="docutils literal">opal_convertor_prepare_for_send</tt> 関数より引用:</p>
            <pre class="literal-block">
if( convertor-&gt;flags &amp; CONVERTOR_WITH_CHECKSUM ) {
    if( datatype-&gt;flags &amp; OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
        if( ((datatype-&gt;ub - datatype-&gt;lb) == (OPAL_PTRDIFF_TYPE)datatype-&gt;size)
            || (1 &gt;= convertor-&gt;count) )
            convertor-&gt;fAdvance = opal_pack_homogeneous_contig_checksum;
        else
            convertor-&gt;fAdvance = opal_pack_homogeneous_contig_with_gaps_checksum;
    } else {
        convertor-&gt;fAdvance = opal_generic_simple_pack_checksum;
    }
} else {
    if( datatype-&gt;flags &amp; OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
        if( ((datatype-&gt;ub - datatype-&gt;lb) == (OPAL_PTRDIFF_TYPE)datatype-&gt;size)
            || (1 &gt;= convertor-&gt;count) )
            convertor-&gt;fAdvance = opal_pack_homogeneous_contig;
        else
            convertor-&gt;fAdvance = opal_pack_homogeneous_contig_with_gaps;
    } else {
        convertor-&gt;fAdvance = opal_generic_simple_pack;
    }
}
</pre>
            <p><tt class="docutils literal">opal_convertor_prepare_for_recv</tt> 関数より引用:</p>
            <pre class="literal-block">
if( convertor-&gt;flags &amp; CONVERTOR_WITH_CHECKSUM ) {
#if OPAL_ENABLE_HETEROGENEOUS_SUPPORT
    if( !(convertor-&gt;flags &amp; CONVERTOR_HOMOGENEOUS) ) {
        convertor-&gt;fAdvance = opal_unpack_general_checksum;
    } else
#endif
    if( convertor-&gt;pDesc-&gt;flags &amp; OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
        convertor-&gt;fAdvance = opal_unpack_homogeneous_contig_checksum;
    } else {
        convertor-&gt;fAdvance = opal_generic_simple_unpack_checksum;
    }
} else {
#if OPAL_ENABLE_HETEROGENEOUS_SUPPORT
    if( !(convertor-&gt;flags &amp; CONVERTOR_HOMOGENEOUS) ) {
        convertor-&gt;fAdvance = opal_unpack_general;
    } else
#endif
    if( convertor-&gt;pDesc-&gt;flags &amp; OPAL_DATATYPE_FLAG_CONTIGUOUS ) {
        convertor-&gt;fAdvance = opal_unpack_homogeneous_contig;
    } else {
        convertor-&gt;fAdvance = opal_generic_simple_unpack;
    }
}
</pre>
          </div>
          <div class="section" id="master-opal-convertor-master-t">
            <h3>
              <a class="toc-backref" href="#id64"><tt class="docutils literal">master</tt> (<tt class="docutils literal">opal_convertor_master_t *</tt>)</a>
            </h3>
            <blockquote>

the master convertor</blockquote>
          </div>
          <div class="section" id="stack-pos-uint32-t">
            <h3>
              <a class="toc-backref" href="#id65"><tt class="docutils literal">stack_pos</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

the actual position on the stack</blockquote>
            <p>
1に初期化される。</p>
          </div>
          <div class="section" id="partial-length-uint32-t">
            <h3>
              <a class="toc-backref" href="#id66"><tt class="docutils literal">partial_length</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

amount of data left over from the last unpack</blockquote>
            <p>
0に初期化される。</p>
          </div>
          <div class="section" id="bconverted-size-t">
            <h3>
              <a class="toc-backref" href="#id67"><tt class="docutils literal">bConverted</tt> (<tt class="docutils literal">size_t</tt>)</a>
            </h3>
            <blockquote>

# of bytes already converted</blockquote>
            <p>
0に初期化される。</p>
          </div>
          <div class="section" id="checksum-uint32-t">
            <h3>
              <a class="toc-backref" href="#id68"><tt class="docutils literal">checksum</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

checksum computed by pack/unpack operation</blockquote>
          </div>
          <div class="section" id="csum-ui1-uint32-t">
            <h3>
              <a class="toc-backref" href="#id69"><tt class="docutils literal">csum_ui1</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
            <blockquote>

partial checksum computed by pack/unpack operation</blockquote>
          </div>
          <div class="section" id="csum-ui2-size-t">
            <h3>
              <a class="toc-backref" href="#id70"><tt class="docutils literal">csum_ui2</tt> (<tt class="docutils literal">size_t</tt>)</a>
            </h3>
            <blockquote>

partial checksum computed by pack/unpack operation</blockquote>
          </div>
          <div class="section" id="static-stack-dt-stack-t-dt-static-stack-size">
            <h3>
              <a class="toc-backref" href="#id71"><tt class="docutils literal">static_stack</tt> (<tt class="docutils literal">dt_stack_t[DT_STATIC_STACK_SIZE]</tt>)</a>
            </h3>
            <blockquote>

local stack for small datatypes</blockquote>
            <p><tt class="docutils literal">pStack</tt> 配列のメモリ確保時に、必要な配列要素数が <tt class="docutils literal">DT_STATIC_STACK_SIZE</tt>
以下であれば、 <tt class="docutils literal">malloc</tt> のコストを避けるために、この配列が使用される。</p>
          </div>
          <div class="section" id="cbmemcpy-memcpy-fct-t">
            <h3>
              <a class="toc-backref" href="#id72"><tt class="docutils literal">cbmemcpy</tt> (<tt class="docutils literal">memcpy_fct_t</tt>)</a>
            </h3>
            <p><tt class="docutils literal">OPAL_CUDA_SUPPORT</tt> が真の場合のみ。</p>
            <blockquote>

memcpy or cuMemcpy</blockquote>
          </div>
          <div class="section" id="stream-void">
            <h3>
              <a class="toc-backref" href="#id73"><tt class="docutils literal">stream</tt> (<tt class="docutils literal">void *</tt>)</a>
            </h3>
            <p><tt class="docutils literal">OPAL_CUDA_SUPPORT</tt> が真の場合のみ。</p>
            <blockquote>

CUstream for async copy</blockquote>
          </div>
        </div>
        <div class="section" id="opal-convertor-master-t">
          <h2>
            <a class="toc-backref" href="#id74">
              <tt class="docutils literal">opal_convertor_master_t</tt>
            </a>
          </h2>
          <div class="section" id="next-opal-convertor-master-t">
            <h3>
              <a class="toc-backref" href="#id75"><tt class="docutils literal">next</tt> (<tt class="docutils literal">opal_convertor_master_t *</tt>)</a>
            </h3>
          </div>
          <div class="section" id="remote-arch-uint32-t">
            <h3>
              <a class="toc-backref" href="#id76"><tt class="docutils literal">remote_arch</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
          </div>
          <div class="section" id="id5">
            <h3>
              <a class="toc-backref" href="#id77"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
          </div>
          <div class="section" id="hetero-mask-uint32-t">
            <h3>
              <a class="toc-backref" href="#id78"><tt class="docutils literal">hetero_mask</tt> (<tt class="docutils literal">uint32_t</tt>)</a>
            </h3>
          </div>
          <div class="section" id="remote-sizes-size-t-opal-datatype-max-predefined">
            <h3>
              <a class="toc-backref" href="#id79"><tt class="docutils literal">remote_sizes</tt> (<tt class="docutils literal">size_t[OPAL_DATATYPE_MAX_PREDEFINED]</tt>)</a>
            </h3>
          </div>
          <div class="section" id="pfunctions-conversion-fct-t">
            <h3>
              <a class="toc-backref" href="#id80"><tt class="docutils literal">pFunctions</tt> (<tt class="docutils literal">conversion_fct_t *</tt>)</a>
            </h3>
          </div>
        </div>
        <div class="section" id="dt-stack-t">
          <h2>
            <a class="toc-backref" href="#id81">
              <tt class="docutils literal">dt_stack_t</tt>
            </a>
          </h2>
          <p>
datatypeのtype mapに応じてデータ変換を行うときに一時的に使用する構造体。</p>
          <p>
1つの <tt class="docutils literal">dt_stack_t</tt> オブジェクトが1つの繰り返し(1組の <tt class="docutils literal">ddt_loop_desc_t</tt> と
<tt class="docutils literal">ddt_endloop_desc_t</tt>)に対応する。</p>
          <p>
ただし、<tt class="docutils literal">MPI_Send</tt> 関数のようにあるdatatypeのデータが複数(<tt class="docutils literal">count</tt>)個指定されたときには、 <tt class="docutils literal"><span class="pre">dt_type_desc_t::desc</span></tt> 配列の最初の要素の直前に仮想的な <tt class="docutils literal">ddt_loop_desc_t</tt> オブジェクトがあるとみなす。そのため、そのときには対応する <tt class="docutils literal">ddt_loop_desc_t</tt> オブジェクトが存在しない以下のオブジェクトを <tt class="docutils literal">dt_stack_t</tt> 配列の先頭に作成して使用する。:</p>
          <pre class="literal-block">
.index = -1
.type  = OPAL_DATATYPE_LOOP
.count = count
.disp  = 0
</pre>
          <p>
また、データ変換が中断した状態の場合は、 <tt class="docutils literal">dt_stack_t</tt> 配列の最後に
<tt class="docutils literal">ddt_elem_desc_t</tt> に対応する <tt class="docutils literal">dt_stack_t</tt> オブジェクトが作成され、1つの繰り返し内でデータ変換をどこまで行ったかの状態のデータを保持する。</p>
          <p>
例えば、以下のように作成したdatatypeを考える。:</p>
          <pre class="literal-block">
MPI_Type_vector(4, 5, 6, MPI_UINT16_T, &amp;dt1);
MPI_Type_create_resized(dt1, 0, 50, &amp;dt2);
MPI_Type_contiguous(3, dt2, &amp;dt3);
MPI_Type_create_resized(dt3, 0, 154, &amp;dt);
MPI_Type_commit(&amp;dt);
</pre>
          <p>
これを図で現すと以下である。 <tt class="docutils literal">■</tt> はデータ2バイト(<tt class="docutils literal">uint16_t</tt> 1個)、
<tt class="docutils literal">□</tt> は隙間2バイトを示す。:</p>
          <pre class="literal-block">
■■■■■□■■■■■□■■■■■□■■■■■□□
■■■■■□■■■■■□■■■■■□■■■■■□□
■■■■■□■■■■■□■■■■■□■■■■■□□
□□
</pre>
          <p>
このdatatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::desc.desc</span></tt> 配列は以下になる。:</p>
          <pre class="literal-block">
[0] = {
    .loop = {
        .common = {
            .type = OPAL_DATATYPE_LOOP
        },
        .loops = 3, // &lt;1st argument of MPI_Type_contiguous&gt;
        .items = 4, // 4 - 0
        .extent = 50
    }
},
[1] = {
    .loop = {
        .common = {
            .type = OPAL_DATATYPE_LOOP
        },
        .loops = 4, // &lt;1st argument of MPI_Type_vector&gt;
        .items = 2, // 3 - 1
        .extent = 12 // sizeof(uint16_t) * &lt;3rd argument of MPI_Type_vector&gt;
    }
},
[2] = {
    elem = {
        .common = {
            .type = OPAL_DATATYPE_INT2
        },
        .count = 5, // &lt;2nd argument of MPI_Type_vector&gt;
        .extent = 2, // sizeof(uint16_t)
        .disp = 0
    }
},
[3] = {
    .end_loop = {
        .common = {
            .type = OPAL_DATATYPE_END_LOOP
        },
        .items = 2, // [1].items
        .size = 10, // sizeof(uint16_t) * 5
        .first_elem_disp = 0
    }
},
[4] = {
    .end_loop = {
        .common = {
            .type = OPAL_DATATYPE_END_LOOP
        },
        .items = 4, // [0].items
        .size = 40, // sizeof(uint16_t) * 5 * 4
        .first_elem_disp = 0
    }
},
[5] = {
    .end_loop = {
        .common = {
            .type = OPAL_DATATYPE_END_LOOP
        },
        .items = 5, // 5 - 0
        .size = 120, // sizeof(uint16_t) * 5 * 4 * 3
        .first_elem_disp = 0
    }
}
</pre>
          <p>
このdatatypeの <tt class="docutils literal"><span class="pre">opal_datatype_t::opt_desc.desc</span></tt> 配列は、
<tt class="docutils literal"><span class="pre">opal_datatype_t::desc.desc</span></tt> 配列の <tt class="docutils literal">[2]</tt> が以下に変わったものになる。:</p>
          <pre class="literal-block">
[2] = {
    elem = {
        .common = {
            .type = OPAL_DATATYPE_INT1
        },
        .count = 10, // sizeof(uint16_t) * &lt;2nd argument of MPI_Type_vector&gt;
        .extent = 1, // sizeof(uint8_t)
        .disp = 0
    }
}
</pre>
          <p>
このdatatypeのデータを以下のように2要素だけ送受信する場合を考える。:</p>
          <pre class="literal-block">
MPI_Sendrecv(sbuf, 2, dt, rank, tag, rbuf, 2, dt, rank, tag,
             MPI_COMM_SELF, MPI_STATUS_IGNORE);
</pre>
          <p>
この通信と同じことをプログラム内で <tt class="docutils literal">memcpy</tt> しようとすると、以下のような3重ループになるであろう。:</p>
          <pre class="literal-block">
disp = 0;
for (i = 0; i &lt; 2; i++) {
    for (j = 0; j &lt; 3; j++) {
        for (k = 0; k &lt; 4; k++) {
            memcpy(&amp;rbuf[disp], &amp;sbuf[disp], 5 * sizeof(uint16_t));
            disp += 6;
        }
        disp += 1;
    }
    disp += 2;
}
</pre>
          <p>
この3重ループを、 <tt class="docutils literal">i = 0</tt>, <tt class="docutils literal">j = 0</tt>, <tt class="docutils literal">k = 0</tt> で最初の <tt class="docutils literal">memcpy</tt> を実行するときには、 <tt class="docutils literal"><span class="pre">opal_convertor_t::pStack</span></tt> 配列は以下の状態になる。:</p>
          <pre class="literal-block">
[0] = {
    .index = -1,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 2,
    .disp  = 0
},
[1] = {
    .index = 0,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 3,
    .disp  = 0
},
[2] = {
    .index = 1,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 4,
    .disp  = 0
},
</pre>
          <p>
この3重ループを、 <tt class="docutils literal">i = 1</tt>, <tt class="docutils literal">j = 2</tt>, <tt class="docutils literal">k = 3</tt> で最後の <tt class="docutils literal">memcpy</tt> を実行するときには、 <tt class="docutils literal"><span class="pre">opal_convertor_t::pStack</span></tt> 配列は以下の状態になる。:</p>
          <pre class="literal-block">
[0] = {
    .index = -1,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 0,
    .disp  = 154 // 154 * 1
},
[1] = {
    .index = 0,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 0,
    .disp  = 254 // 154 + 50 * 2
},
[2] = {
    .index = 1,
    .type  = OPAL_DATATYPE_LOOP,
    .count = 0,
    .disp  = 290 // 254 + 12 * 3
},
</pre>
          <p>
さらに、バッファ不足のためなどに <tt class="docutils literal">memcpy</tt> が <tt class="docutils literal">5 * sizeof(uint16_t)</tt>
ではなく <tt class="docutils literal">5 * sizeof(uint16_t)</tt> だけ行われてデータ変換が中断した状態の場合には、上記の <tt class="docutils literal"><span class="pre">opal_convertor_t::pStack</span></tt> 配列の最後に以下が追加された状態になる。:</p>
          <pre class="literal-block">
[3] = {
    .index = 2,
    .type  = OPAL_DATATYPE_UINT2,
    .count = 3, /* 5 - 2 */
    .disp  = 294 // 254 + 12 * 3 + 2 * sizeof(uint16_t)
},
</pre>
          <div class="section" id="index-int32-t">
            <h3>
              <a class="toc-backref" href="#id82"><tt class="docutils literal">index</tt> (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <blockquote>

index in the element description</blockquote>
            <p>
対応する <tt class="docutils literal">ddt_loop_desc_t</tt> または <tt class="docutils literal">ddt_elem_desc_t</tt> の、
<tt class="docutils literal"><span class="pre">dt_type_desc_t::desc</span></tt> 配列でのindex。</p>
            <p>
繰り返しを開始するとき(<tt class="docutils literal">ddt_loop_desc_t</tt>)またはデータ変換を中断したとき(<tt class="docutils literal">ddt_elem_desc_t</tt>)に設定される。</p>
          </div>
          <div class="section" id="type-int16-t">
            <h3>
              <a class="toc-backref" href="#id83"><tt class="docutils literal">type</tt> (<tt class="docutils literal">int16_t</tt>)</a>
            </h3>
            <blockquote>

the type used for the last pack/unpack (original or
OPAL_DATATYPE_UINT1)</blockquote>
            <p>
対応する <tt class="docutils literal">ddt_loop_desc_t</tt> または <tt class="docutils literal">ddt_elem_desc_t</tt> の、
<tt class="docutils literal"><span class="pre">ddt_loop_desc_t::common.type</span></tt> または <tt class="docutils literal"><span class="pre">ddt_elem_desc_t::common.type</span></tt> 。</p>
            <p>
繰り返しを開始するとき(<tt class="docutils literal">ddt_loop_desc_t</tt>)またはデータ変換を中断したとき(<tt class="docutils literal">ddt_elem_desc_t</tt>)に設定される。</p>
          </div>
          <div class="section" id="count-size-t">
            <h3>
              <a class="toc-backref" href="#id84"><tt class="docutils literal">count</tt> (<tt class="docutils literal">size_t</tt>)</a>
            </h3>
            <blockquote>

number of times we still have to do it</blockquote>
            <p>
繰り返しの残りの回数。</p>
            <p>
回数には現在処理中の繰り返しも含む。</p>
            <p>
繰り返しを開始するときに、対応する <tt class="docutils literal">ddt_loop_desc_t</tt> の <tt class="docutils literal">loops</tt> の値に設定される。そして、繰り返しの内容を1回処理するごとに、減算される。</p>
            <p>
データ変換を中断するときに、対応する <tt class="docutils literal">ddt_elem_desc_t</tt> の <tt class="docutils literal">count</tt> の値からデータ変換済みの個数を引いた値に、設定される。</p>
          </div>
          <div class="section" id="disp-opal-ptrdiff-type">
            <h3>
              <a class="toc-backref" href="#id85"><tt class="docutils literal">disp</tt> (<tt class="docutils literal">OPAL_PTRDIFF_TYPE</tt>)</a>
            </h3>
            <blockquote>

actual displacement depending on the count field</blockquote>
            <p>
繰り返しの現在の状態における、 <tt class="docutils literal"><span class="pre">ddt_elem_desc_t::disp</span></tt> に加算しなければならないdisplacement。言い方を変えると、 <tt class="docutils literal"><span class="pre">ddt_elem_desc_t::disp</span></tt> が0だった場合の、メモリ領域先頭からの現在のdisplacement。</p>
            <p>
繰り返しを開始するときに、その時点での1つ浅い繰り返しの
<tt class="docutils literal"><span class="pre">dt_stack_t::disp</span></tt> の値に設定される。そして、繰り返しの内容を1回処理するごとに、対応する <tt class="docutils literal">ddt_loop_desc_t</tt> の <tt class="docutils literal">extent</tt> の値だけ加算される。</p>
            <p>
データ変換を中断するときに、次に処理するdisplacementに設定される。</p>
          </div>
        </div>
      </div>
      <div class="section" id="id6">
        <h1>
          <a class="toc-backref" href="#id86">関数</a>
        </h1>
        <div class="section" id="opal-convertor-copy-and-prepare-for-send">
          <h2>
            <a class="toc-backref" href="#id87">
              <tt class="docutils literal">opal_convertor_copy_and_prepare_for_send</tt>
            </a>
          </h2>
          <p>
送信のためにconvertorを初期化する。</p>
          <p><tt class="docutils literal"><span class="pre">opal_convertor_t::remoteArch</span></tt>, <tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt>,
<tt class="docutils literal"><span class="pre">opal_convertor_t::master</span></tt> を第1引数の <tt class="docutils literal">pSrcConv</tt> からコピーして
<tt class="docutils literal">opal_convertor_prepare_for_send</tt> 関数を呼ぶ。</p>
          <p>
なお、第1引数の <tt class="docutils literal">pSrcConv</tt> は、Open MPIのhomogeneous環境では、
<tt class="docutils literal">&amp;ompi_mpi_local_convertor</tt> が渡ってくる。</p>
          <div class="section" id="psrcconv-opal-convertor-t-in">
            <h3>
              <a class="toc-backref" href="#id88"><tt class="docutils literal">pSrcConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN]</a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_::remoteArch</span></tt>, <tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt>,
<tt class="docutils literal"><span class="pre">opal_convertor_t::master</span></tt> のコピー元となるconvertor。</p>
          </div>
          <div class="section" id="datatype-opal-datatype-t-in">
            <h3>
              <a class="toc-backref" href="#id89"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータのdatatype。</p>
          </div>
          <div class="section" id="count-int32-t-in">
            <h3>
              <a class="toc-backref" href="#id90"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータの個数。</p>
          </div>
          <div class="section" id="puserbuf-void-in">
            <h3>
              <a class="toc-backref" href="#id91"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータの先頭へのポインタ。</p>
          </div>
          <div class="section" id="flags-int32-t-in">
            <h3>
              <a class="toc-backref" href="#id92"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt> に追加(bitwise OR)する <tt class="docutils literal">CONVERTOR_*</tt> フラグ。</p>
          </div>
          <div class="section" id="convertor-opal-convertor-t-out">
            <h3>
              <a class="toc-backref" href="#id93"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
            </h3>
            <p>
設定するconvertor。</p>
          </div>
          <div class="section" id="return-int32-t">
            <h3>
              <a class="toc-backref" href="#id94">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>
                <tt class="docutils literal">OPAL_SUCCESS</tt>
              </dt>
              <dd>
成功。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-copy-and-prepare-for-recv">
          <h2>
            <a class="toc-backref" href="#id95">
              <tt class="docutils literal">opal_convertor_copy_and_prepare_for_recv</tt>
            </a>
          </h2>
          <p>
受信のためにconvertorを初期化する。</p>
          <p><tt class="docutils literal"><span class="pre">opal_convertor_t::remoteArch</span></tt>, <tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt>,
<tt class="docutils literal"><span class="pre">opal_convertor_t::master</span></tt> を第1引数の <tt class="docutils literal">pSrcConv</tt> からコピーして
<tt class="docutils literal">opal_convertor_prepare_for_recv</tt> 関数を呼ぶ。</p>
          <p>
なお、第1引数の <tt class="docutils literal">pSrcConv</tt> は、Open MPIのhomogeneous環境では、
<tt class="docutils literal">&amp;ompi_mpi_local_convertor</tt> が渡ってくる。</p>
          <div class="section" id="id7">
            <h3>
              <a class="toc-backref" href="#id96"><tt class="docutils literal">pSrcConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN]</a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_::remoteArch</span></tt>, <tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt>,
<tt class="docutils literal"><span class="pre">opal_convertor_t::master</span></tt> のコピー元となるconvertor。</p>
          </div>
          <div class="section" id="id8">
            <h3>
              <a class="toc-backref" href="#id97"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータのdatatype。</p>
          </div>
          <div class="section" id="id9">
            <h3>
              <a class="toc-backref" href="#id98"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータの最大個数。</p>
          </div>
          <div class="section" id="id10">
            <h3>
              <a class="toc-backref" href="#id99"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータの先頭へのポインタ。</p>
          </div>
          <div class="section" id="id11">
            <h3>
              <a class="toc-backref" href="#id100"><tt class="docutils literal">flags</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p><tt class="docutils literal"><span class="pre">opal_convertor_t::flags</span></tt> に追加(bitwise OR)する <tt class="docutils literal">CONVERTOR_*</tt> フラグ。</p>
          </div>
          <div class="section" id="id12">
            <h3>
              <a class="toc-backref" href="#id101"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
            </h3>
            <p>
設定するconvertor。</p>
          </div>
          <div class="section" id="id13">
            <h3>
              <a class="toc-backref" href="#id102">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>
                <tt class="docutils literal">OPAL_SUCCESS</tt>
              </dt>
              <dd>
成功。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-prepare-for-send">
          <h2>
            <a class="toc-backref" href="#id103">
              <tt class="docutils literal">opal_convertor_prepare_for_send</tt>
            </a>
          </h2>
          <p>
送信のためにconvertorを初期化する。</p>
          <div class="section" id="id14">
            <h3>
              <a class="toc-backref" href="#id104"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
            </h3>
            <p>
設定するconvertor。</p>
          </div>
          <div class="section" id="id15">
            <h3>
              <a class="toc-backref" href="#id105"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータのdatatype。</p>
          </div>
          <div class="section" id="id16">
            <h3>
              <a class="toc-backref" href="#id106"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータの個数。</p>
          </div>
          <div class="section" id="id17">
            <h3>
              <a class="toc-backref" href="#id107"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
            </h3>
            <p>
送信前のデータの先頭へのポインタ。</p>
          </div>
          <div class="section" id="id18">
            <h3>
              <a class="toc-backref" href="#id108">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>
                <tt class="docutils literal">OPAL_SUCCESS</tt>
              </dt>
              <dd>
成功。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-prepare-for-recv">
          <h2>
            <a class="toc-backref" href="#id109">
              <tt class="docutils literal">opal_convertor_prepare_for_recv</tt>
            </a>
          </h2>
          <p>
受信のためにconvertorを初期化する。</p>
          <div class="section" id="id19">
            <h3>
              <a class="toc-backref" href="#id110"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [OUT]</a>
            </h3>
            <p>
設定するconvertor。</p>
          </div>
          <div class="section" id="id20">
            <h3>
              <a class="toc-backref" href="#id111"><tt class="docutils literal">datatype</tt> (<tt class="docutils literal">opal_datatype_t *</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータのdatatype。</p>
          </div>
          <div class="section" id="id21">
            <h3>
              <a class="toc-backref" href="#id112"><tt class="docutils literal">count</tt> (<tt class="docutils literal">int32_t</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータの最大個数。</p>
          </div>
          <div class="section" id="id22">
            <h3>
              <a class="toc-backref" href="#id113"><tt class="docutils literal">pUserBuf</tt> (<tt class="docutils literal">void *</tt>) [IN]</a>
            </h3>
            <p>
受信後のデータの先頭へのポインタ。</p>
          </div>
          <div class="section" id="id23">
            <h3>
              <a class="toc-backref" href="#id114">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>
                <tt class="docutils literal">OPAL_SUCCESS</tt>
              </dt>
              <dd>
成功。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-pack">
          <h2>
            <a class="toc-backref" href="#id115">
              <tt class="docutils literal">opal_convertor_pack</tt>
            </a>
          </h2>
          <p>
第1引数の <tt class="docutils literal">pConv</tt> で示されるデータを、第2引数の <tt class="docutils literal">iov</tt> と第3引数
<tt class="docutils literal">out_size</tt> で示される1つ以上の連続なメモリ領域にpackする。</p>
          <p><tt class="docutils literal"><span class="pre">pConv-&gt;local_size</span></tt> の値と <tt class="docutils literal"><span class="pre">iov[].iov_len</span></tt> の値の和が異なっていてもよい。異なる場合は、小さい値に合わせてpackする。変換したデータの量(バイト数)は <tt class="docutils literal"><span class="pre">pConv-&gt;bConverted</span></tt> に保存されるため、同じ
<tt class="docutils literal">opal_convertor_t</tt> オブジェクトを使用して次にこの関数を呼んだ場合は、前の続きのデータからpackされる。</p>
          <p>
すべてのデータを変換したら、 <tt class="docutils literal"><span class="pre">pConv-&gt;flags</span></tt> に <tt class="docutils literal">CONVERTOR_COMPLETED</tt> が設定される。</p>
          <div class="section" id="pconv-opal-convertor-t-in-out">
            <h3>
              <a class="toc-backref" href="#id116"><tt class="docutils literal">pConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
            </h3>
            <p>
convertor。</p>
          </div>
          <div class="section" id="iov-struct-iovec-in-out">
            <h3>
              <a class="toc-backref" href="#id117"><tt class="docutils literal">iov</tt> (<tt class="docutils literal">struct iovec *</tt>) [IN/OUT]</a>
            </h3>
            <p>
関数呼び出し時(IN)は、変換先のメモリ領域(先頭ポインタとサイズ)を示す配列。</p>
            <p>
関数復帰時(OUT)は、 <tt class="docutils literal"><span class="pre">iovec::iov_len</span></tt> が、そのメモリ領域にpackしたデータの量(バイト数)に設定される。</p>
          </div>
          <div class="section" id="out-size-uint32-t-in-out">
            <h3>
              <a class="toc-backref" href="#id118"><tt class="docutils literal">out_size</tt> (<tt class="docutils literal">uint32_t *</tt>) [IN/OUT]</a>
            </h3>
            <p>
関数呼び出し時(IN)は、 <tt class="docutils literal">iov</tt> 配列の要素数。</p>
            <p>
関数復帰時(OUT)は、 <tt class="docutils literal">iov</tt> 配列の消費要素数。</p>
          </div>
          <div class="section" id="max-data-size-t-out">
            <h3>
              <a class="toc-backref" href="#id119"><tt class="docutils literal">max_data</tt> (<tt class="docutils literal">size_t *</tt>) [OUT]</a>
            </h3>
            <p>
変換したデータの量(バイト数)。</p>
          </div>
          <div class="section" id="id24">
            <h3>
              <a class="toc-backref" href="#id120">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>0</dt>
              <dd>
データ変換は未完了。</dd>
              <dt>1</dt>
              <dd>
データ変換は完了。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-unpack">
          <h2>
            <a class="toc-backref" href="#id121">
              <tt class="docutils literal">opal_convertor_unpack</tt>
            </a>
          </h2>
          <p>
第2引数の <tt class="docutils literal">iov</tt> と第3引数 <tt class="docutils literal">out_size</tt> で示される1つ以上の連続なメモリ領域のデータを、第1引数の <tt class="docutils literal">pConv</tt> で示されるメモリ領域に、unpackする。</p>
          <p><tt class="docutils literal"><span class="pre">pConv-&gt;local_size</span></tt> の値と <tt class="docutils literal"><span class="pre">iov[].iov_len</span></tt> の値の和が異なっていてもよい。異なる場合は、小さい値に合わせてunpackする。変換したデータの量(バイト数)は <tt class="docutils literal"><span class="pre">pConv-&gt;bConverted</span></tt> に保存されるため、同じ
<tt class="docutils literal">opal_convertor_t</tt> オブジェクトを使用して次にこの関数を呼んだ場合は、前の続きのデータからunpackされる。</p>
          <p>
すべてのデータを変換したら、 <tt class="docutils literal"><span class="pre">pConv-&gt;flags</span></tt> に <tt class="docutils literal">CONVERTOR_COMPLETED</tt> が設定される。</p>
          <div class="section" id="id25">
            <h3>
              <a class="toc-backref" href="#id122"><tt class="docutils literal">pConv</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
            </h3>
            <p>
convertor。</p>
          </div>
          <div class="section" id="iov-struct-iovec-in">
            <h3>
              <a class="toc-backref" href="#id123"><tt class="docutils literal">iov</tt> (<tt class="docutils literal">struct iovec *</tt>) [IN]</a>
            </h3>
            <p>
変換元のメモリ領域(先頭ポインタとサイズ)を示す配列。</p>
          </div>
          <div class="section" id="id26">
            <h3>
              <a class="toc-backref" href="#id124"><tt class="docutils literal">out_size</tt> (<tt class="docutils literal">uint32_t *</tt>) [IN/OUT]</a>
            </h3>
            <p>
関数呼び出し時(IN)は、 <tt class="docutils literal">iov</tt> 配列の要素数。</p>
            <p>
関数復帰時(OUT)は、 <tt class="docutils literal">iov</tt> 配列の消費要素数。</p>
          </div>
          <div class="section" id="id27">
            <h3>
              <a class="toc-backref" href="#id125"><tt class="docutils literal">max_data</tt> (<tt class="docutils literal">size_t *</tt>) [OUT]</a>
            </h3>
            <p>
変換したデータの量(バイト数)。</p>
          </div>
          <div class="section" id="id28">
            <h3>
              <a class="toc-backref" href="#id126">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>0</dt>
              <dd>
データ変換は未完了。</dd>
              <dt>1</dt>
              <dd>
データ変換は完了。</dd>
            </dl>
          </div>
        </div>
        <div class="section" id="opal-convertor-set-position">
          <h2>
            <a class="toc-backref" href="#id127">
              <tt class="docutils literal">opal_convertor_set_position</tt>
            </a>
          </h2>
          <p>
データ変換の現在位置(データ変換をどこまで行ってあり次にどこから再開するか)を <tt class="docutils literal">*position</tt> バイトの位置に設定する。</p>
          <p><tt class="docutils literal"><span class="pre">convertor-&gt;bConverted</span></tt>, <tt class="docutils literal"><span class="pre">convertor-&gt;pStack</span></tt>, <tt class="docutils literal"><span class="pre">convertor-&gt;stack_pos</span></tt>,
<tt class="docutils literal"><span class="pre">convertor-&gt;partial_length</span></tt> の値を設定する。</p>
          <div class="section" id="convertor-opal-convertor-t-in-out">
            <h3>
              <a class="toc-backref" href="#id128"><tt class="docutils literal">convertor</tt> (<tt class="docutils literal">opal_convertor_t *</tt>) [IN/OUT]</a>
            </h3>
            <p>
convertor。</p>
          </div>
          <div class="section" id="position-size-t-in">
            <h3>
              <a class="toc-backref" href="#id129"><tt class="docutils literal">position</tt><tt class="docutils literal">size_t *</tt> [IN]</a>
            </h3>
            <p>
設定するデータ変換の現在位置。</p>
            <p>
先頭からのバイト数で指定する。</p>
          </div>
          <div class="section" id="id29">
            <h3>
              <a class="toc-backref" href="#id130">return (<tt class="docutils literal">int32_t</tt>)</a>
            </h3>
            <dl class="docutils">
              <dt>
                <tt class="docutils literal">OPAL_SUCCESS</tt>
              </dt>
              <dd>
成功。</dd>
              <dt>その他の <tt class="docutils literal">OPAL_*</tt> のエラーコード</dt>
              <dd>
エラー。</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

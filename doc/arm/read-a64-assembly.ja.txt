################################################################
A64のアセンブリコードの読み方
################################################################

.. style: docutils-report

はじめに
========

C言語などで低レベルのプログラムを書いていたりすると、デバッグや
チューニングのためにアセンブリコードを読まないとならないことが
でてくる。

たとえば、GCCでは、コンパイル時に ``-S`` オプションを付けることに
よってアセンブリ言語のソースファイル(``*.s``)が出力され、そこに
埋め込まれたコメントからC言語などのソースファイルの行との対応関係が
分かる。
また、 ``-g`` オプションを付けてコンパイルすると出力された
実行ファイルなどにデバッグ情報が付加され、GDBでデバッグするときに
C言語などのソースファイルの行との対応関係が分かる。

ここでは、ソースファイルから再コンパイルせずに ``objdump``
コマンドなどで出力されたアセンブリコードを読み解いていきたい
場合、もしくはソースファイルの行レベルではなく演算子レベルで
アセンブリコードを読んでいきたい場合を想定して、ARMの命令セットで
あるA64のアセンブリコードの読み方について入門的に紹介する。

A64は、ARMv8-Aアーキテクチャ(およびそれ以降)のAArch64実行状態で
使われる命令セットである。ARMv8-A, AArch64, A64については、
たとえば `ARM社のARMv8アーキテクチャの説明
<http://www.arm.com/ja/products/processors/armv8-architecture.php>`_
を参照。

情報源
------

ARMv8-A, AArch64, A64を含むARMアーキテクチャの情報は、
`ARM社のARM Infocenter <http://infocenter.arm.com/>`_ に存在する。
特に、ユーザ空間のアプリケーションで動作する一般的なプログラムの
アセンブリコードを読むには、以下の文書が参考になるであろう。

`ARM Compiler armasm User Guide (英語) <http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0801e/index.html>`_
  A32、T32、A64のアセンブリ言語の記述や各命令の説明と、その説明に
  必要な状態(AArch32, AArch64)、レジスタ、条件コードなどの説明がある。
`ARM コンパイラ armasm ユーザガイド (日本語) <http://infocenter.arm.com/help/topic/com.arm.doc.dui0801cj/index.html>`_
  上記の文書の日本語版。
`Procedure Call Standard for the ARM 64-bit Architecture (AArch64) (英語) <http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0055c/index.html>`_
  AArch64のABI (Application Binary Interface)での手続き呼び出しの
  規約の説明がある。手続き呼び出し時にレジスタをどのように使うかなど。

ただし、上記のリンクは2016年6月時点での最新バージョンへのリンクである。
新しいバージョンの文書が存在する場合は、新しい方を参照した方がよい。

前提となる知識
--------------

これ以降の説明では、以下の概念は知っているものとして説明する。

- アセンブリ言語 (assembly language)
- レジスタ (register)
- スタック (stack)
- branch, load, store, move

A64の特徴
=========

.. ToDo: 見出しを変更する

レジスタセット
--------------

汎用レジスタとスタックポインタレジスタ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下では、 `ARM コンパイラ armasm ユーザガイド
<http://infocenter.arm.com/help/topic/com.arm.doc.dui0801cj/index.html>`_
の説明を引用・要約する。
ただし、表現を一部変更している部分がある。

ユーザ空間のアプリケーションから直接アクセスできるレジスタとして
以下がある。

- 31本の汎用レジスタ(general-purpose register)。
  レジスタ名はX0からX30。
  64ビットのうち下位32ビットにはW0からW30のレジスタ名でアクセスできる。
- 1本のスタックポインタレジスタ(stack pointer register)。
  レジスタ名はSP。

これらはすべて64ビットのレジスタである。
ただし、ほとんどのA64整数命令は、32ビットまたは64ビットレジスタの
いずれかで実行できる。
レジスタ幅は、レジスタ識別子で判断される。
ここで、Wは32ビット、Xは64ビットを意味する。
W\ *n*\ およびX\ *n*\ という名前で、 *n* は範囲0-30 にあり、
同じレジスタを参照する。
ある命令の32ビット形式を使用する場合、ソースレジスタの上位32ビットは
無視され、デスティネーションレジスタの上位32ビットがゼロに設定される。

W31またはX31という名前のレジスタはない。
命令に応じて、レジスタ31はスタックポインタまたはゼロレジスタの
いずれかになる。
スタックポインタとして使用される場合、SPと呼ぶ。
ゼロレジスタとして使用される場合、32ビットコンテキストではWZR、
64ビットコンテキストではXZRと呼ぶ。

サブルーチン呼び出しが実行されたとき、リンクレジスタ(LR)が
復帰アドレスを格納する。
リターンアドレスがスタックにストアされる場合は、LRを汎用レジスタと
して使用することもできる。LRはレジスタ30にマップする。

AArch64状態で事前宣言されているコアレジスタの名前は以下の通りである。

============== ========================================================
Register names Meaning
============== ========================================================
``W0-W30``     32ビット汎用レジスタ。
``X0-X30``     64ビット汎用レジスタ。
``WZR``        32ビットRAZ/WIレジスタ。
               32ビットコンテキストでゼロレジスタとして使用されるときの
               レジスタ31の名前。
``XZR``        64ビットRAZ/WIレジスタ。
               64ビットコンテキストでゼロレジスタとして使用されるときの
               レジスタ31の名前。
``WSP``        32ビットスタックポインタ。32ビットコンテキストでスタック
               ポインタとして使用されるときのレジスタ31の名前。
``SP``         64ビットスタックポインタ。64ビットコンテキストでスタック
               ポインタとして使用されるときのレジスタ31の名前。
``LR``         リンクレジスタ。
               X30と同じ意味。
============== ========================================================

Advanced SIMDレジスタと浮動小数点レジスタ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

汎用レジスタ・スタックポインタレジスタ以外に、ユーザ空間の
アプリケーションから直接アクセスできるレジスタとして、
Advanced SIMDレジスタと浮動小数点レジスタも存在する。

この文書ではAdvanced SIMDレジスタと浮動小数点レジスタおよびそれを
扱う命令については説明しない。

NZCVレジスタ
^^^^^^^^^^^^

特殊なレジスタとして、条件フラグのコピーを保持するNZCVレジスタがある。

NZCVレジスタは、 ``CMP`` などの比較命令を実行したときに
その比較結果に応じて間接的に更新され、 ``B.cond`` 命令を
実行したときに間接的に参照される。

NZCVレジスタは、 ``MSR`` (Move immediate value to Special Register)命令
および ``MRS`` (Move general-purpose register to System Register)命令を
使用して直接アクセスできるが、通常のプログラムでは直接アクセスしない。

.. ToDo 例を書く

アドレシングモード
------------------

以下では、 `ARM コンパイラ armasm ユーザガイド
<http://infocenter.arm.com/help/topic/com.arm.doc.dui0801cj/index.html>`_
の「6.19 メモリアクセス」の説明を引用・要約する。
ただし、表現を一部変更している部分がある。

多くのロード命令とストア命令では、3つのアドレシングモードが
サポートされている。

オフセットアドレシング (offset addressing)
  ベースレジスタから取得したアドレスにオフセット値が適用される。
  その結果は、メモリアクセス用のアドレスとして使用される。
  ベースレジスタは変更されない。
  このモードのアセンブリ言語構文は以下のとおり。 ::

   [ Rn , offset ]

プレインデクスアドレシング (pre-indexed addressing)
  ベースレジスタから取得したアドレスにオフセット値が適用される。
  その結果は、メモリアクセス用のアドレスとして使用され、ベース
  レジスタにライトバックされる。
  このモードのアセンブリ言語構文は以下のとおり。 ::

   [ Rn , offset ]!

ポストインデクスアドレシング (post-indexed addressing)
  ベースレジスタから取得したアドレスが、変更されずに、メモリ
  アクセス用のアドレスとして使用される。
  そのアドレスにオフセット値が適用され、ベースレジスタに
  ライトバックされる。
  このモードのアセンブリ言語構文は以下のとおり。 ::

   [ Rn ], offset

いずれの場合も、 ``Rn`` はベースレジスタで、 ``offset`` には
以下を指定できる。

- イミディエート定数。
- インデクスレジスタ ``Rm`` 。
- シフトしたインデクスレジスタ(``Rm``, ``LSL #shift`` など)。

.. ToDo 例を書く。

主要な命令
==========

branch/return
-------------

========== ================= ============================== ============================================================================
Mnemonic   Operand           Brief Description              Meaning
========== ================= ============================== ============================================================================
``B``      ``label``         Branch                         ラベル ``label`` にbranchする。
``BR``     ``reg``           Branch to Register             レジスタ ``reg`` のメモリアドレスにbranchする。
``B.cond`` ``label``         Branch conditionally           NZCVシステムレジスタが条件 ``cond`` を満たしたら ``label`` にbranchする。
``CBZ``    ``reg label``     Compare and Branch on Zero     レジスタ ``reg`` の値が0であれば ``label`` にbranchする。
``CBNZ``   ``reg label``     Compare and Branch on Nonzero  レジスタ ``reg`` の値が0でなければ ``label`` にbranchする。
``TBZ``    ``reg imm label`` Test bit and Branch if Zero    レジスタ ``reg`` の値のビット ``imm`` が0であれば ``label`` にbranchする。
``TBNZ``   ``reg imm label`` Test bit and Branch if Nonzero レジスタ ``reg`` の値のビット ``imm`` が0でなければ ``label`` にbranchする。
``BL``     ``label``         Branch with Link               ラベル  ``label`` のサブルーチンをcallする。
``BLR``    ``reg``           Branch with Link to Register   レジスタ ``reg`` のメモリアドレスのサブルーチンをcallする。
``RET``    (``reg``)         Return from subroutine         レジスタ ``reg`` のメモリアドレスにreturnする。
                                                            ``reg`` が無い場合はレジスタX30のメモリアドレスにreturnする。
========== ================= ============================== ============================================================================

``B.cond`` では、その命令より前に実行された ``CMP`` などの比較命令に
よって設定されたNZCVシステムレジスタの値を見てbranchするかどうかが
決まる。 ``cond`` は以下のいずれかである。

====== =========================================
Suffix Meaning
====== =========================================
``EQ`` Equal
``NE`` Not equal
``CS`` Carry set (identical to HS)
``HS`` Unsigned higher or same (identical to CS)
``CC`` Carry clear (identical to LO)
``LO`` Unsigned lower (identical to CC)
``MI`` Minus or negative result
``PL`` Positive or zero result
``VS`` Overflow
``VC`` No overflow
``HI`` Unsigned higher
``LS`` Unsigned lower or same
``GE`` Signed greater than or equal
``LT`` Signed less than
``GT`` Signed greater than
``LE`` Signed less than or equal
``AL`` Always (this is the default)
====== =========================================

load
----

========== ================= =================================== ==============================================================================================================
Mnemonic   Operand           Brief Description                    Meaning
========== ================= =================================== ==============================================================================================================
``LDRB``   ``dst src``       Load Register Byte                  メモリアドレス ``src`` から値(8ビット)をloadし、レジスタ ``dst`` に格納する。
``LDRH``   ``dst src``       Load Register Halfword              メモリアドレス ``src`` から値(16ビット)をloadし、レジスタ ``dst`` に格納する。
``LDR``    ``dst src``       Load Register                       メモリアドレス ``src`` から値(32ビットまたは64ビット)をloadし、レジスタ ``dst`` に格納する。
``LDRSW``  ``dst src``       Load Register Signed Word           メモリアドレス ``src`` から値(32ビット)をloadし、符号拡張し、レジスタ ``dst`` に格納する。
``LDRSH``  ``dst src``       Load Register Signed Halfword       メモリアドレス ``src`` から値(16ビット)をloadし、符号拡張し、レジスタ ``dst`` に格納する。
``LDRSB``  ``dst src``       Load Register Signed Byte           メモリアドレス ``src`` から値(8ビット)をloadし、符号拡張し、レジスタ ``dst`` に格納する。
``LDP``    ``dst1 dst2 src`` Load Pair of Registers              メモリアドレス ``src`` から2つの値(32ビットまたは64ビット)をloadし、レジスタ ``dst1`` と ``dst2`` に格納する。
``LDP``    ``dst1 dst2 src`` Load Pair of SIMD and FP Registers  メモリアドレス ``src`` から2つの値をloadし、FP/SIMDレジスタ ``dst1`` と ``dst2`` に格納する。
``LDPSW``  ``dst1 dst2 src`` Load Pair of Registers Signed Word  メモリアドレス ``src`` から2つの値(32ビット)をloadし、符号拡張し、レジスタ ``dst1`` と ``dst2`` に格納する。
========== ================= =================================== ==============================================================================================================

store
-----

========== ================= =================================== ================================================================================================
Mnemonic   Operand           Brief Description                    Meaning
========== ================= =================================== ================================================================================================
``STRB``   ``src dst``       Store Register Byte                 レジスタ ``src`` の値(8ビット)をメモリアドレス ``dst`` にstoreする。
``STRH``   ``src dst``       Store Register Halfword             レジスタ ``src`` の値(16ビット)をメモリアドレス ``dst`` にstoreする。
``STR``    ``src dst``       Store Register                      レジスタ ``src`` の値(32ビットまたは64ビット)をメモリアドレス ``dst`` にstoreする。
``STP``    ``src1 src2 dst`` Store Pair of Registers             レジスタ ``src1`` と ``src2`` の値(64ビットまたは32ビット)をメモリアドレス ``dst`` にstoreする。
``STP``    ``src1 src2 dst`` Store Pair of SIMD and FP Registers FP/SIMDレジスタ ``src1`` と ``src2`` の値をメモリアドレス ``dst`` にstoreする。
========== ================= =================================== ================================================================================================

move
----

========== ================= ================================================ ============================================================
Mnemonic   Operand           Brief Description                                Meaning
========== ================= ================================================ ============================================================
``MOV``    ``dst imm``       Move                                             即値 ``imm`` をレジスタ ``dst`` にmoveする。
``MOV``    ``dst src``       Move                                             レジスタ ``src`` の値をレジスタ ``dst`` にmoveする。
``MRS``    ``dst src``       Move System Register                             システムレジスタ ``src`` の値をレジスタ ``dst`` にmoveする。
``MSR``    ``dst imm``       Move immediate value to Special Register         即値 ``imm`` を特別レジスタ ``dst`` にmoveする。
``MSR``    ``dst src``       Move general-purpose register to System Register レジスタ ``src`` の値をシステムレジスタ ``dst`` にmoveする。
========== ================= ================================================ ============================================================

bit operation
-------------

========== ================= ============================================= =======================================================================================================
Mnemonic   Operand           Brief Description                             Meaning
========== ================= ============================================= =======================================================================================================
``AND``    ``dst src imm``   Bitwise AND (immediate)                       レジスタ ``src`` の値と即値 ``imm`` のビット積をレジスタ ``dst`` に格納する。
``AND``    ``dst src1 src2`` Bitwise AND (shifted register)                レジスタ ``src1`` の値とレジスタ ``src2`` のビット積をレジスタ ``dst`` に格納する。
``ANDS``   ``dst src imm``   Bitwise AND (immediate), setting flags        レジスタ ``src`` の値と即値 ``imm`` のビット積をレジスタ ``dst`` に格納し、条件フラグを設定する。
``ANDS``   ``dst src1 src2`` Bitwise AND (shifted register), setting flags レジスタ ``src1`` の値とレジスタ ``src2`` のビット積をレジスタ ``dst`` に格納し、条件フラグを設定する。
``ORR``    ``dst src imm``   Bitwise OR (immediate)                        レジスタ ``src`` の値と即値 ``imm`` のビット和をレジスタ ``dst`` に格納する。
``ORR``    ``dst src1 src2`` Bitwise OR (shifted register)                 レジスタ ``src1`` の値とレジスタ ``src2`` のビット和をレジスタ ``dst`` に格納する。
========== ================= ============================================= =======================================================================================================

手続き呼び出し規約
==================

汎用レジスタ
------------

========= ======= ===================================================
Register  Special Role in the procedure call standard
========= ======= ===================================================
SP        \       The Stack Pointer.
r30       LR      The Link Register.
r29       FP      The Frame Pointer
r19...r28 \       Callee-saved registers.
r18       \       The Platform Register, if needed;
                  otherwise a temporary register.
r17       IP1     The second intra-procedure-call temporary register
                  (can be used by call veneers and PLT code);
                  at other times may be used as a temporary register.
r16       IP0     The first intra-procedure-call scratch register
                  (can be used by call veneers and PLT code);
                  at other times may be used as a temporary register.
r9...r15  \       Temporary registers
r8        \       Indirect result location register
r0...r7   \       Parameter/result registers
========= ======= ===================================================

アセンブリコードの読み方
========================
